{
  "swagger": "2.0",
  "info": {
    "title": "Mayan EDMS API",
    "description": "Free Open Source Electronic Document Management System",
    "license": {
      "name": "Apache 2.0"
    },
    "version": "v4"
  },
  "host": "localhost",
  "schemes": [
    "http"
  ],
  "basePath": "/api/v4",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "Basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "Basic": []
    }
  ],
  "paths": {
    "/announcements/": {
      "get": {
        "operationId": "announcements_list",
        "description": "Returns a list of all the announcements.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Announcement"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "announcements"
        ]
      },
      "post": {
        "operationId": "announcements_create",
        "description": "Create a new announcement.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "announcements"
        ]
      },
      "parameters": []
    },
    "/announcements/{announcement_id}/": {
      "get": {
        "operationId": "announcements_read",
        "description": "Return the details of the selected announcement.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "announcements"
        ]
      },
      "put": {
        "operationId": "announcements_update",
        "description": "Edit the selected announcement.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "announcements"
        ]
      },
      "patch": {
        "operationId": "announcements_partial_update",
        "description": "Edit the selected announcement.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          }
        },
        "tags": [
          "announcements"
        ]
      },
      "delete": {
        "operationId": "announcements_delete",
        "description": "Delete the selected announcement.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "announcements"
        ]
      },
      "parameters": [
        {
          "name": "announcement_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/app_image_error/{app_image_error_name}/image/": {
      "get": {
        "operationId": "app_image_error_image_read",
        "description": "Returns an image representation of the selected app image error.",
        "parameters": [],
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "app_image_error"
        ]
      },
      "parameters": [
        {
          "name": "app_image_error_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/assets/": {
      "get": {
        "operationId": "assets_list",
        "description": "Returns a list of all the assets.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Asset"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "assets"
        ]
      },
      "post": {
        "operationId": "assets_create",
        "description": "Create a new asset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        },
        "tags": [
          "assets"
        ]
      },
      "parameters": []
    },
    "/assets/{asset_id}/": {
      "get": {
        "operationId": "assets_read",
        "description": "Return the details of the selected asset.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        },
        "tags": [
          "assets"
        ]
      },
      "put": {
        "operationId": "assets_update",
        "description": "Edit the properties of the selected asset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        },
        "tags": [
          "assets"
        ]
      },
      "patch": {
        "operationId": "assets_partial_update",
        "description": "Edit the properties of the selected asset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        },
        "tags": [
          "assets"
        ]
      },
      "delete": {
        "operationId": "assets_delete",
        "description": "Delete the selected asset.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "assets"
        ]
      },
      "parameters": [
        {
          "name": "asset_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/assets/{asset_id}/image/": {
      "get": {
        "operationId": "assets_image_read",
        "description": "Returns an image representation of the selected asset.",
        "parameters": [],
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "assets"
        ]
      },
      "parameters": [
        {
          "name": "asset_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/auth/token/obtain/": {
      "post": {
        "operationId": "auth_token_obtain_create",
        "description": "Obtain an API authentication token.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          }
        },
        "tags": [
          "auth"
        ]
      },
      "parameters": []
    },
    "/batch_requests/": {
      "post": {
        "operationId": "batch_requests_create",
        "description": "Submit a batch API request.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchAPIRequestResponse"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchAPIRequestResponse"
            }
          }
        },
        "tags": [
          "batch_requests"
        ]
      },
      "parameters": []
    },
    "/cabinets/": {
      "get": {
        "operationId": "cabinets_list",
        "description": "Returns a list of all the cabinets.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Cabinet"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "cabinets"
        ]
      },
      "post": {
        "operationId": "cabinets_create",
        "description": "Create a new cabinet.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cabinet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cabinet"
            }
          }
        },
        "tags": [
          "cabinets"
        ]
      },
      "parameters": []
    },
    "/cabinets/{cabinet_id}/": {
      "get": {
        "operationId": "cabinets_read",
        "description": "Returns the details of the selected cabinet.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cabinet"
            }
          }
        },
        "tags": [
          "cabinets"
        ]
      },
      "put": {
        "operationId": "cabinets_update",
        "description": "Edit the selected cabinet.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cabinet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cabinet"
            }
          }
        },
        "tags": [
          "cabinets"
        ]
      },
      "patch": {
        "operationId": "cabinets_partial_update",
        "description": "Edit the selected cabinet.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cabinet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cabinet"
            }
          }
        },
        "tags": [
          "cabinets"
        ]
      },
      "delete": {
        "operationId": "cabinets_delete",
        "description": "Delete the selected cabinet.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "cabinets"
        ]
      },
      "parameters": [
        {
          "name": "cabinet_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/cabinets/{cabinet_id}/documents/": {
      "get": {
        "operationId": "cabinets_documents_list",
        "description": "Returns a list of all the documents contained in a particular cabinet.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Document"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "cabinets"
        ]
      },
      "parameters": [
        {
          "name": "cabinet_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/cabinets/{cabinet_id}/documents/add/": {
      "post": {
        "operationId": "cabinets_documents_add_create",
        "description": "Add a document to a cabinet.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CabinetDocumentAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CabinetDocumentAdd"
            }
          }
        },
        "tags": [
          "cabinets"
        ]
      },
      "parameters": [
        {
          "name": "cabinet_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/cabinets/{cabinet_id}/documents/remove/": {
      "post": {
        "operationId": "cabinets_documents_remove_create",
        "description": "Remove a document from a cabinet.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CabinetDocumentRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CabinetDocumentRemove"
            }
          }
        },
        "tags": [
          "cabinets"
        ]
      },
      "parameters": [
        {
          "name": "cabinet_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/checkouts/": {
      "get": {
        "operationId": "checkouts_list",
        "description": "Returns a list of all the documents that are currently checked out.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentCheckout"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "checkouts"
        ]
      },
      "post": {
        "operationId": "checkouts_create",
        "description": "Checkout a document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewDocumentCheckout"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/NewDocumentCheckout"
            }
          }
        },
        "tags": [
          "checkouts"
        ]
      },
      "parameters": []
    },
    "/checkouts/{checkout_id}/checkout_info/": {
      "get": {
        "operationId": "checkouts_checkout_info_read",
        "description": "Retrieve the details of the selected checked out document entry.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentCheckout"
            }
          }
        },
        "tags": [
          "checkouts"
        ]
      },
      "delete": {
        "operationId": "checkouts_checkout_info_delete",
        "description": "Check in a document.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "checkouts"
        ]
      },
      "parameters": [
        {
          "name": "checkout_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/content_types/": {
      "get": {
        "operationId": "content_types_list",
        "description": "Returns a list of all the available content types.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContentType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "content_types"
        ]
      },
      "parameters": []
    },
    "/document_file_actions/": {
      "get": {
        "operationId": "document_file_actions_list",
        "description": "Returns a list of the available document file actions.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentFileAction"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document_file_actions"
        ]
      },
      "parameters": []
    },
    "/document_types/": {
      "get": {
        "operationId": "document_types_list",
        "description": "Returns a list of all the document types.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "post": {
        "operationId": "document_types_create",
        "description": "Create a new document type.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentType"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "parameters": []
    },
    "/document_types/{document_type_id}/": {
      "get": {
        "operationId": "document_types_read",
        "description": "Return the details of the selected document type.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentType"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "put": {
        "operationId": "document_types_update",
        "description": "Edit the properties of the selected document type.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentType"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "patch": {
        "operationId": "document_types_partial_update",
        "description": "Edit the properties of the selected document type.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentType"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "delete": {
        "operationId": "document_types_delete",
        "description": "Delete the selected document type.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "parameters": [
        {
          "name": "document_type_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/document_types/{document_type_id}/metadata_types/": {
      "get": {
        "operationId": "document_types_metadata_types_list",
        "description": "Returns a list of selected document type's metadata types.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentTypeMetadataType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "post": {
        "operationId": "document_types_metadata_types_create",
        "description": "Add a metadata type to the selected document type.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeMetadataType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeMetadataType"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "parameters": [
        {
          "name": "document_type_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/document_types/{document_type_id}/metadata_types/{metadata_type_id}/": {
      "get": {
        "operationId": "document_types_metadata_types_read",
        "description": "Retrieve the details of a document type metadata type.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeMetadataType"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "put": {
        "operationId": "document_types_metadata_types_update",
        "description": "Edit the selected document type metadata type.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeMetadataType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeMetadataType"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "patch": {
        "operationId": "document_types_metadata_types_partial_update",
        "description": "Edit the selected document type metadata type.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeMetadataType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeMetadataType"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "delete": {
        "operationId": "document_types_metadata_types_delete",
        "description": "Remove a metadata type from a document type.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "parameters": [
        {
          "name": "document_type_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "metadata_type_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/document_types/{document_type_id}/ocr/settings/": {
      "get": {
        "operationId": "document_types_ocr_settings_read",
        "description": "Return the document type OCR settings.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeOCRSettings"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "put": {
        "operationId": "document_types_ocr_settings_update",
        "description": "Set the document type OCR settings.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeOCRSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeOCRSettings"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "patch": {
        "operationId": "document_types_ocr_settings_partial_update",
        "description": "Set the document type OCR settings.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeOCRSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeOCRSettings"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "parameters": [
        {
          "name": "document_type_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/document_types/{document_type_id}/parsing/settings/": {
      "get": {
        "operationId": "document_types_parsing_settings_read",
        "description": "Return the document type parsing settings.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeParsingSettings"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "put": {
        "operationId": "document_types_parsing_settings_update",
        "description": "Set the document type parsing settings.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeParsingSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeParsingSettings"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "patch": {
        "operationId": "document_types_parsing_settings_partial_update",
        "description": "Set the document type parsing settings.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeParsingSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeParsingSettings"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "parameters": [
        {
          "name": "document_type_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/document_types/{document_type_id}/quick_labels/": {
      "get": {
        "operationId": "document_types_quick_labels_list",
        "description": "Returns a list of all the document type quick labels.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentTypeQuickLabel"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "post": {
        "operationId": "document_types_quick_labels_create",
        "description": "Create a new document type quick label.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeQuickLabel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeQuickLabel"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "parameters": [
        {
          "name": "document_type_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/document_types/{document_type_id}/quick_labels/{document_type_quick_label_id}/": {
      "get": {
        "operationId": "document_types_quick_labels_read",
        "description": "Return the details of the selected quick label.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeQuickLabel"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "put": {
        "operationId": "document_types_quick_labels_update",
        "description": "Edit the properties of the selected quick label.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeQuickLabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeQuickLabel"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "patch": {
        "operationId": "document_types_quick_labels_partial_update",
        "description": "Edit the properties of the selected quick label.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeQuickLabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeQuickLabel"
            }
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "delete": {
        "operationId": "document_types_quick_labels_delete",
        "description": "Delete the selected quick label.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document_types"
        ]
      },
      "parameters": [
        {
          "name": "document_type_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_type_quick_label_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/document_version_modification_backends/": {
      "get": {
        "operationId": "document_version_modification_backends_list",
        "description": "Returns a list of the available document version modification backends.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentVersionModification"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document_version_modification_backends"
        ]
      },
      "parameters": []
    },
    "/documents/": {
      "get": {
        "operationId": "documents_list",
        "description": "Returns a list of all the documents.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Document"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "post": {
        "operationId": "documents_create",
        "description": "Create a new document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": []
    },
    "/documents/accessed/": {
      "get": {
        "operationId": "documents_accessed_list",
        "description": "Return a list of the recently accessed documents for the current user.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RecentlyAccessedDocument"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": []
    },
    "/documents/created/": {
      "get": {
        "operationId": "documents_created_list",
        "description": "Return a list of the recently created documents.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Document"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": []
    },
    "/documents/duplicated/": {
      "get": {
        "operationId": "documents_duplicated_list",
        "description": "Return a list of duplicated documents.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Document"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": []
    },
    "/documents/favorites/": {
      "get": {
        "operationId": "documents_favorites_list",
        "description": "Return a list of the favorite documents for the current user.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FavoriteDocument"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "post": {
        "operationId": "documents_favorites_create",
        "description": "Add a new document to the list of favorite documents for the current user.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FavoriteDocument"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FavoriteDocument"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": []
    },
    "/documents/favorites/{favorite_document_id}/": {
      "get": {
        "operationId": "documents_favorites_read",
        "description": "Return the details of the selected favorite document.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FavoriteDocument"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_favorites_delete",
        "description": "Delete the selected favorite document.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "favorite_document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/upload/": {
      "post": {
        "operationId": "documents_upload_create",
        "description": "Create a new document and a new document file.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentUpload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentUpload"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": []
    },
    "/documents/{document_id}/": {
      "get": {
        "operationId": "documents_read",
        "description": "Return the details of the selected document.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "put": {
        "operationId": "documents_update",
        "description": "Edit the properties of the selected document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "patch": {
        "operationId": "documents_partial_update",
        "description": "Edit the properties of the selected document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_delete",
        "description": "Move the selected document to the thrash.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/cabinets/": {
      "get": {
        "operationId": "documents_cabinets_list",
        "description": "Returns a list of all the cabinets to which a document belongs.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Cabinet"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/checkout/": {
      "get": {
        "operationId": "documents_checkout_read",
        "description": "Retrieve the checkout details of the selected document entry.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentCheckout"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_checkout_delete",
        "description": "Check in the selected document.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/comments/": {
      "get": {
        "operationId": "documents_comments_list",
        "description": "Returns a list of all the document comments.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Comment"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "post": {
        "operationId": "documents_comments_create",
        "description": "Create a new document comment.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/comments/{comment_id}/": {
      "get": {
        "operationId": "documents_comments_read",
        "description": "Returns the details of the selected document comment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "put": {
        "operationId": "documents_comments_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "patch": {
        "operationId": "documents_comments_partial_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_comments_delete",
        "description": "Delete the selected document comment.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "comment_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/duplicates/": {
      "get": {
        "operationId": "documents_duplicates_list",
        "description": "Return a list of the selected document's duplicates.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DuplicateTargetDocument"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/": {
      "get": {
        "operationId": "documents_files_list",
        "description": "Return a list of the selected document's files.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentFile"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "post": {
        "operationId": "documents_files_create",
        "description": "Create a new document file.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentFile"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentFile"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/": {
      "get": {
        "operationId": "documents_files_read",
        "description": "Returns the selected document file details.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentFile"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "put": {
        "operationId": "documents_files_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentFile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentFile"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "patch": {
        "operationId": "documents_files_partial_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentFile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentFile"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_files_delete",
        "description": "Delete the selected document file.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/download/": {
      "get": {
        "operationId": "documents_files_download_read",
        "description": "Download a document file.",
        "parameters": [],
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/pages/": {
      "get": {
        "operationId": "documents_files_pages_list",
        "description": "",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentFilePage"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/pages/{document_file_page_id}/": {
      "get": {
        "operationId": "documents_files_pages_read",
        "description": "Returns the selected document page details.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentFilePage"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_page_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/pages/{document_file_page_id}/content/": {
      "get": {
        "operationId": "documents_files_pages_content_read",
        "description": "Returns the content of the selected document page.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentFilePageContent"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_page_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/pages/{document_file_page_id}/image/": {
      "get": {
        "operationId": "documents_files_pages_image_read",
        "description": "Returns an image representation of the selected document.",
        "parameters": [],
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_page_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/signatures/detached/": {
      "get": {
        "operationId": "documents_files_signatures_detached_list",
        "description": "Returns a list of all the detached signatures of a document file.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DetachedSignature"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/signatures/detached/sign/": {
      "post": {
        "operationId": "documents_files_signatures_detached_sign_create",
        "description": "Sign a document file with a detached signature.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignDetached"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SignDetached"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/signatures/detached/upload/": {
      "post": {
        "operationId": "documents_files_signatures_detached_upload_create",
        "description": "Upload a detached signature file for a document file.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetachedSignatureUpload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DetachedSignatureUpload"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/signatures/detached/{detached_signature_id}/": {
      "get": {
        "operationId": "documents_files_signatures_detached_read",
        "description": "Returns the details of the selected detached signature.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DetachedSignature"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_files_signatures_detached_delete",
        "description": "Delete an detached signature of the selected document.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "detached_signature_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/signatures/embedded/": {
      "get": {
        "operationId": "documents_files_signatures_embedded_list",
        "description": "Returns a list of all the embedded signatures of a document file.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EmbeddedSignature"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/signatures/embedded/sign/": {
      "post": {
        "operationId": "documents_files_signatures_embedded_sign_create",
        "description": "Sign a document file with an embedded signature.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignEmbedded"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SignEmbedded"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/files/{document_file_id}/signatures/embedded/{embedded_signature_id}/": {
      "get": {
        "operationId": "documents_files_signatures_embedded_read",
        "description": "Returns the details of the selected embedded signature.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EmbeddedSignature"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_file_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "embedded_signature_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/indexes/": {
      "get": {
        "operationId": "documents_indexes_list",
        "description": "Returns a list of all the indexes instance nodes where this\ndocument is found.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IndexInstanceNode"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/metadata/": {
      "get": {
        "operationId": "documents_metadata_list",
        "description": "Returns a list of selected document's metadata types and values.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentMetadata"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "post": {
        "operationId": "documents_metadata_create",
        "description": "Add an existing metadata type and value to the selected document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentMetadata"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentMetadata"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/metadata/{metadata_id}/": {
      "get": {
        "operationId": "documents_metadata_read",
        "description": "Return the details of the selected document metadata type and value.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentMetadata"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "put": {
        "operationId": "documents_metadata_update",
        "description": "Edit the selected document metadata type and value.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentMetadata"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "patch": {
        "operationId": "documents_metadata_partial_update",
        "description": "Edit the selected document metadata type and value.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentMetadata"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_metadata_delete",
        "description": "Remove this metadata entry from the selected document.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "metadata_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/ocr/submit/": {
      "post": {
        "operationId": "documents_ocr_submit_create",
        "description": "Submit a document for OCR.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/resolved_smart_links/": {
      "get": {
        "operationId": "documents_resolved_smart_links_list",
        "description": "Returns a list of the smart links that apply to the document.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ResolvedSmartLink"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/resolved_smart_links/{resolved_smart_link_id}/": {
      "get": {
        "operationId": "documents_resolved_smart_links_read",
        "description": "Return the details of the selected resolved smart link.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ResolvedSmartLink"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "resolved_smart_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/resolved_smart_links/{resolved_smart_link_id}/documents/": {
      "get": {
        "operationId": "documents_resolved_smart_links_documents_list",
        "description": "Returns a list of the smart link documents that apply to the document.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ResolvedSmartLinkDocument"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "resolved_smart_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/resolved_web_links/": {
      "get": {
        "operationId": "documents_resolved_web_links_list",
        "description": "Returns a list of resolved web links for the specified document.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ResolvedWebLink"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/resolved_web_links/{resolved_web_link_id}/": {
      "get": {
        "operationId": "documents_resolved_web_links_read",
        "description": "Return the details of the selected resolved smart link.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ResolvedWebLink"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "resolved_web_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/resolved_web_links/{resolved_web_link_id}/navigate/": {
      "get": {
        "operationId": "documents_resolved_web_links_navigate_read",
        "description": "Perform a redirection to the target URL of the selected resolved smart link.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Blank"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "resolved_web_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/signature_captures/": {
      "get": {
        "operationId": "documents_signature_captures_list",
        "description": "Returns a list of all the signature_captures.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SignatureCapture"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "post": {
        "operationId": "documents_signature_captures_create",
        "description": "Create a new signature_capture.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignatureCapture"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SignatureCapture"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/signature_captures/{signature_capture_id}/": {
      "get": {
        "operationId": "documents_signature_captures_read",
        "description": "Return the details of the selected signature_capture.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SignatureCapture"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "put": {
        "operationId": "documents_signature_captures_update",
        "description": "Edit the selected signature_capture.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignatureCapture"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SignatureCapture"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "patch": {
        "operationId": "documents_signature_captures_partial_update",
        "description": "Edit the selected signature_capture.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignatureCapture"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SignatureCapture"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_signature_captures_delete",
        "description": "Delete the selected signature_capture.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "signature_capture_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/signature_captures/{signature_capture_id}/image/": {
      "get": {
        "operationId": "documents_signature_captures_image_read",
        "description": "Returns an image representation of the selected signature capture.",
        "parameters": [],
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "signature_capture_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/tags/": {
      "get": {
        "operationId": "documents_tags_list",
        "description": "Returns a list of all the tags attached to a document.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/tags/attach/": {
      "post": {
        "operationId": "documents_tags_attach_create",
        "description": "Attach a tag to a document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTagAttach"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTagAttach"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/tags/remove/": {
      "post": {
        "operationId": "documents_tags_remove_create",
        "description": "Remove a tag from a document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTagRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTagRemove"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/type/change/": {
      "post": {
        "operationId": "documents_type_change_create",
        "description": "Change the type of the selected document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentChangeType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentChangeType"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/versions/": {
      "get": {
        "operationId": "documents_versions_list",
        "description": "Return a list of the selected document's versions.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentVersion"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "post": {
        "operationId": "documents_versions_create",
        "description": "Create a new document version.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentVersion"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersion"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/versions/{document_version_id}/": {
      "get": {
        "operationId": "documents_versions_read",
        "description": "Returns the selected document version details.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersion"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "put": {
        "operationId": "documents_versions_update",
        "description": "Edit the properties of the selected document version.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersion"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "patch": {
        "operationId": "documents_versions_partial_update",
        "description": "Edit the properties of the selected document version.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersion"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_versions_delete",
        "description": "Delete the selected document version.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/versions/{document_version_id}/export/": {
      "post": {
        "operationId": "documents_versions_export_create",
        "description": "Exports the specified document version.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blank"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Blank"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/versions/{document_version_id}/modify/": {
      "post": {
        "operationId": "documents_versions_modify_create",
        "description": "Execute a modification backend on the selected document version.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentVersionModificationExecute"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersionModificationExecute"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/versions/{document_version_id}/ocr/submit/": {
      "post": {
        "operationId": "documents_versions_ocr_submit_create",
        "description": "Submit a document version for OCR.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/versions/{document_version_id}/pages/": {
      "get": {
        "operationId": "documents_versions_pages_list",
        "description": "Returns an list of the pages for the selected document version.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentVersionPage"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "post": {
        "operationId": "documents_versions_pages_create",
        "description": "Create a new document version page.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentVersionPage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersionPage"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/": {
      "get": {
        "operationId": "documents_versions_pages_read",
        "description": "Returns the selected document version page details.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersionPage"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "put": {
        "operationId": "documents_versions_pages_update",
        "description": "Edit the properties of the selected document version page.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentVersionPage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersionPage"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "patch": {
        "operationId": "documents_versions_pages_partial_update",
        "description": "Edit the properties of the selected document version page.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentVersionPage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersionPage"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "delete": {
        "operationId": "documents_versions_pages_delete",
        "description": "Delete the selected document version page.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_page_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/image/": {
      "get": {
        "operationId": "documents_versions_pages_image_read",
        "description": "Returns an image representation of the selected document version page.",
        "parameters": [],
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_page_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/versions/{document_version_id}/pages/{document_version_page_id}/ocr/": {
      "get": {
        "operationId": "documents_versions_pages_ocr_read",
        "description": "Returns the OCR content of the selected document page.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersionPageOCRContent"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "put": {
        "operationId": "documents_versions_pages_ocr_update",
        "description": "Edit the OCR content of the selected document page.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentVersionPageOCRContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersionPageOCRContent"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "patch": {
        "operationId": "documents_versions_pages_ocr_partial_update",
        "description": "Edit the OCR content of the selected document page.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentVersionPageOCRContent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentVersionPageOCRContent"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "document_version_page_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/workflow_instances/": {
      "get": {
        "operationId": "documents_workflow_instances_list",
        "description": "Returns a list of all the document workflow instances.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowInstance"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/workflow_instances/launch/": {
      "post": {
        "operationId": "documents_workflow_instances_launch_create",
        "description": "Launch a new workflow instance for the specified document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowInstanceLaunch"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowInstanceLaunch"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/workflow_instances/{workflow_instance_id}/": {
      "get": {
        "operationId": "documents_workflow_instances_read",
        "description": "Return the details of the selected document workflow instances.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowInstance"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_instance_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/workflow_instances/{workflow_instance_id}/log_entries/": {
      "get": {
        "operationId": "documents_workflow_instances_log_entries_list",
        "description": "Returns a list of all the document workflow instances log entries.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowInstanceLogEntry"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "post": {
        "operationId": "documents_workflow_instances_log_entries_create",
        "description": "Transition a document workflow by creating a new document workflow instance log entry.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowInstanceLogEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowInstanceLogEntry"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_instance_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/workflow_instances/{workflow_instance_id}/log_entries/transitions/": {
      "get": {
        "operationId": "documents_workflow_instances_log_entries_transitions_list",
        "description": "Returns a list of all the possible transition choices for the workflow instance.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowTemplateTransition"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_instance_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/documents/{document_id}/workflow_instances/{workflow_instance_id}/log_entries/{workflow_instance_log_entry_id}/": {
      "get": {
        "operationId": "documents_workflow_instances_log_entries_read",
        "description": "Return the details of the selected document instances log entry.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowInstanceLogEntry"
            }
          }
        },
        "tags": [
          "documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_instance_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_instance_log_entry_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/event_type_namespaces/": {
      "get": {
        "operationId": "event_type_namespaces_list",
        "description": "Returns a list of all the available event type namespaces.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EventTypeNamespace"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "event_type_namespaces"
        ]
      },
      "parameters": []
    },
    "/event_type_namespaces/{name}/": {
      "get": {
        "operationId": "event_type_namespaces_read",
        "description": "Returns the details of an event type namespace.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventTypeNamespace"
            }
          }
        },
        "tags": [
          "event_type_namespaces"
        ]
      },
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/event_type_namespaces/{name}/event_types/": {
      "get": {
        "operationId": "event_type_namespaces_event_types_list",
        "description": "Returns a list of all the available event types from a namespaces.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EventType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "event_type_namespaces"
        ]
      },
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/event_types/": {
      "get": {
        "operationId": "event_types_list",
        "description": "Returns a list of all the available event types.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EventType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "event_types"
        ]
      },
      "parameters": []
    },
    "/events/": {
      "get": {
        "operationId": "events_list",
        "description": "Returns a list of all the available events.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "events"
        ]
      },
      "parameters": []
    },
    "/groups/": {
      "get": {
        "operationId": "groups_list",
        "description": "Returns a list of all the groups.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Group"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "post": {
        "operationId": "groups_create",
        "description": "Create a new group.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "parameters": []
    },
    "/groups/{group_id}/": {
      "get": {
        "operationId": "groups_read",
        "description": "Return the details of the selected group.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "put": {
        "operationId": "groups_update",
        "description": "Edit the selected group.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "patch": {
        "operationId": "groups_partial_update",
        "description": "Partially edit the selected group.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "delete": {
        "operationId": "groups_delete",
        "description": "Delete the selected group.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "groups"
        ]
      },
      "parameters": [
        {
          "name": "group_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/groups/{group_id}/users/": {
      "get": {
        "operationId": "groups_users_list",
        "description": "Returns a list of all the users belonging to the group.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "parameters": [
        {
          "name": "group_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/groups/{group_id}/users/add/": {
      "post": {
        "operationId": "groups_users_add_create",
        "description": "Add a user to a group.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupUserAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupUserAdd"
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "parameters": [
        {
          "name": "group_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/groups/{group_id}/users/remove/": {
      "post": {
        "operationId": "groups_users_remove_create",
        "description": "Remove a user from a group.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupUserRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupUserRemove"
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "parameters": [
        {
          "name": "group_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_instances/": {
      "get": {
        "operationId": "index_instances_list",
        "description": "Returns a list of all the indexes instances.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IndexInstance"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "index_instances"
        ]
      },
      "parameters": []
    },
    "/index_instances/{index_instance_id}/": {
      "get": {
        "operationId": "index_instances_read",
        "description": "Returns the details of the selected index instance.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexInstance"
            }
          }
        },
        "tags": [
          "index_instances"
        ]
      },
      "parameters": [
        {
          "name": "index_instance_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_instances/{index_instance_id}/nodes/": {
      "get": {
        "operationId": "index_instances_nodes_list",
        "description": "Returns a list of all the nodes for the selected index instance.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IndexInstanceNode"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "index_instances"
        ]
      },
      "parameters": [
        {
          "name": "index_instance_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/": {
      "get": {
        "operationId": "index_instances_nodes_read",
        "description": "Returns the details of the selected index instance node.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexInstanceNode"
            }
          }
        },
        "tags": [
          "index_instances"
        ]
      },
      "parameters": [
        {
          "name": "index_instance_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "index_instance_node_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/documents/": {
      "get": {
        "operationId": "index_instances_nodes_documents_list",
        "description": "Returns a list of all the documents contained by a particular\nindex instance node.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Document"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "index_instances"
        ]
      },
      "parameters": [
        {
          "name": "index_instance_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "index_instance_node_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_instances/{index_instance_id}/nodes/{index_instance_node_id}/nodes/": {
      "get": {
        "operationId": "index_instances_nodes_nodes_list",
        "description": "Returns list of all the children nodes for the selected index\ninstance node.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IndexInstanceNode"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "index_instances"
        ]
      },
      "parameters": [
        {
          "name": "index_instance_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "index_instance_node_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_templates/": {
      "get": {
        "operationId": "index_templates_list",
        "description": "Returns a list of all the defined indexes template.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IndexTemplate"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "post": {
        "operationId": "index_templates_create",
        "description": "Create a new index template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexTemplate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexTemplate"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "parameters": []
    },
    "/index_templates/{index_template_id}/": {
      "get": {
        "operationId": "index_templates_read",
        "description": "Returns the details of the selected index template.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexTemplate"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "put": {
        "operationId": "index_templates_update",
        "description": "Edit an index template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexTemplate"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "patch": {
        "operationId": "index_templates_partial_update",
        "description": "Partially edit an index template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexTemplate"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "delete": {
        "operationId": "index_templates_delete",
        "description": "Delete the selected index template.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "parameters": [
        {
          "name": "index_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_templates/{index_template_id}/document_types/": {
      "get": {
        "operationId": "index_templates_document_types_list",
        "description": "Returns a list of the document types associated with this index template.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "parameters": [
        {
          "name": "index_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_templates/{index_template_id}/document_types/add/": {
      "post": {
        "operationId": "index_templates_document_types_add_create",
        "description": "Add a document type to an index template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeAdd"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "parameters": [
        {
          "name": "index_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_templates/{index_template_id}/document_types/remove/": {
      "post": {
        "operationId": "index_templates_document_types_remove_create",
        "description": "Remove a document type from an index template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTypeRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentTypeRemove"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "parameters": [
        {
          "name": "index_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_templates/{index_template_id}/nodes/": {
      "get": {
        "operationId": "index_templates_nodes_list",
        "description": "Returns a list of all the template nodes for the selected index.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IndexTemplateNode"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "post": {
        "operationId": "index_templates_nodes_create",
        "description": "Create a new index template node.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexTemplateNodeWrite"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexTemplateNodeWrite"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "parameters": [
        {
          "name": "index_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_templates/{index_template_id}/nodes/{index_template_node_id}/": {
      "get": {
        "operationId": "index_templates_nodes_read",
        "description": "Returns the details of the selected index template node.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexTemplateNode"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "put": {
        "operationId": "index_templates_nodes_update",
        "description": "Edit an index template node.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexTemplateNodeWrite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexTemplateNodeWrite"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "patch": {
        "operationId": "index_templates_nodes_partial_update",
        "description": "Partially edit an index template node.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexTemplateNodeWrite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IndexTemplateNodeWrite"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "delete": {
        "operationId": "index_templates_nodes_delete",
        "description": "Delete the selected index template node.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "parameters": [
        {
          "name": "index_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "index_template_node_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_templates/{index_template_id}/rebuild/": {
      "post": {
        "operationId": "index_templates_rebuild_create",
        "description": "Rebuild the selected index template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blank"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Blank"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "parameters": [
        {
          "name": "index_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/index_templates/{index_template_id}/reset/": {
      "post": {
        "operationId": "index_templates_reset_create",
        "description": "Reset the selected index template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blank"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Blank"
            }
          }
        },
        "tags": [
          "index_templates"
        ]
      },
      "parameters": [
        {
          "name": "index_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/keys/": {
      "get": {
        "operationId": "keys_list",
        "description": "Returns a list of all the keys.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Key"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "keys"
        ]
      },
      "post": {
        "operationId": "keys_create",
        "description": "Upload a new key.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Key"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Key"
            }
          }
        },
        "tags": [
          "keys"
        ]
      },
      "parameters": []
    },
    "/keys/{key_id}/": {
      "get": {
        "operationId": "keys_read",
        "description": "Return the details of the selected key.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Key"
            }
          }
        },
        "tags": [
          "keys"
        ]
      },
      "delete": {
        "operationId": "keys_delete",
        "description": "Delete the selected key.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "keys"
        ]
      },
      "parameters": [
        {
          "name": "key_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/messages/": {
      "get": {
        "operationId": "messages_list",
        "description": "Returns a list of all the messages.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Message"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "messages"
        ]
      },
      "post": {
        "operationId": "messages_create",
        "description": "Create a new message.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "tags": [
          "messages"
        ]
      },
      "parameters": []
    },
    "/messages/{message_id}/": {
      "get": {
        "operationId": "messages_read",
        "description": "Return the details of the selected message.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "tags": [
          "messages"
        ]
      },
      "put": {
        "operationId": "messages_update",
        "description": "Edit the selected message.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "tags": [
          "messages"
        ]
      },
      "patch": {
        "operationId": "messages_partial_update",
        "description": "Partially edit the selected message.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "tags": [
          "messages"
        ]
      },
      "delete": {
        "operationId": "messages_delete",
        "description": "Delete the selected message.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "messages"
        ]
      },
      "parameters": [
        {
          "name": "message_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/metadata_types/": {
      "get": {
        "operationId": "metadata_types_list",
        "description": "Returns a list of all the metadata types.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MetadataType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "metadata_types"
        ]
      },
      "post": {
        "operationId": "metadata_types_create",
        "description": "Create a new metadata type.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetadataType"
            }
          }
        },
        "tags": [
          "metadata_types"
        ]
      },
      "parameters": []
    },
    "/metadata_types/{metadata_type_id}/": {
      "get": {
        "operationId": "metadata_types_read",
        "description": "Return the details of the selected metadata type.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetadataType"
            }
          }
        },
        "tags": [
          "metadata_types"
        ]
      },
      "put": {
        "operationId": "metadata_types_update",
        "description": "Edit the selected metadata type.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetadataType"
            }
          }
        },
        "tags": [
          "metadata_types"
        ]
      },
      "patch": {
        "operationId": "metadata_types_partial_update",
        "description": "Edit the selected metadata type.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetadataType"
            }
          }
        },
        "tags": [
          "metadata_types"
        ]
      },
      "delete": {
        "operationId": "metadata_types_delete",
        "description": "Delete the selected metadata type.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "metadata_types"
        ]
      },
      "parameters": [
        {
          "name": "metadata_type_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/notifications/": {
      "get": {
        "operationId": "notifications_list",
        "description": "Return a list of notifications for the current user.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Notification"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "parameters": []
    },
    "/objects/{app_label}/{model_name}/permissions/": {
      "get": {
        "operationId": "objects_permissions_list",
        "description": "Returns a list of all the available permissions for a class.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Permission"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/{app_label}/{model_name}/{object_id}/acls/": {
      "get": {
        "operationId": "objects_acls_list",
        "description": "Returns a list of all the object's access control lists",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ACL"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "post": {
        "operationId": "objects_acls_create",
        "description": "Create a new access control list for the selected object.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ACL"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ACL"
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/": {
      "get": {
        "operationId": "objects_acls_read",
        "description": "Returns the details of the selected access control list.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ACL"
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "delete": {
        "operationId": "objects_acls_delete",
        "description": "Delete the selected access control list.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "acl_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/": {
      "get": {
        "operationId": "objects_acls_permissions_list",
        "description": "Returns the access control list permission list.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Permission"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "post": {
        "operationId": "objects_acls_permissions_create",
        "description": "Add a new permission to the selected access control list.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "acl_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/add/": {
      "post": {
        "operationId": "objects_acls_permissions_add_create",
        "description": "Add a permission to an ACL.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ACLPermissionAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ACLPermissionAdd"
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "acl_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/{app_label}/{model_name}/{object_id}/acls/{acl_id}/permissions/remove/": {
      "post": {
        "operationId": "objects_acls_permissions_remove_create",
        "description": "Remove a permission from an ACL.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ACLPermissionRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ACLPermissionRemove"
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "acl_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/{app_label}/{model_name}/{object_id}/errors/": {
      "get": {
        "operationId": "objects_errors_list",
        "description": "Returns a list of all the object's error log entries",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ErrorLogPartitionEntry"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/{app_label}/{model_name}/{object_id}/errors/{error_log_partition_entry_id}/": {
      "get": {
        "operationId": "objects_errors_read",
        "description": "Returns the details of the selected error log entry.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ErrorLogPartitionEntry"
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "delete": {
        "operationId": "objects_errors_delete",
        "description": "Delete the selected error log entry.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "error_log_partition_entry_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/{app_label}/{model_name}/{object_id}/events/": {
      "get": {
        "operationId": "objects_events_list",
        "description": "Return a list of events for the specified object.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/{app_label}/{model_name}/{object_id}/image/": {
      "get": {
        "operationId": "objects_image_read",
        "description": "Returns an image representation of the selected content object.",
        "parameters": [],
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "objects"
        ]
      },
      "parameters": [
        {
          "name": "app_label",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "model_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/permissions/": {
      "get": {
        "operationId": "permissions_list",
        "description": "Returns a list of all the available permissions.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Permission"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "parameters": []
    },
    "/project/": {
      "get": {
        "operationId": "project_read",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProjectInformation"
            }
          }
        },
        "tags": [
          "project"
        ]
      },
      "parameters": []
    },
    "/roles/": {
      "get": {
        "operationId": "roles_list",
        "description": "Returns a list of all the roles.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Role"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "post": {
        "operationId": "roles_create",
        "description": "Create a new role.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": []
    },
    "/roles/{role_id}/": {
      "get": {
        "operationId": "roles_read",
        "description": "Return the details of the selected role.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "put": {
        "operationId": "roles_update",
        "description": "Edit the selected role.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "patch": {
        "operationId": "roles_partial_update",
        "description": "Edit the selected role.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "delete": {
        "operationId": "roles_delete",
        "description": "Delete the selected role.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": [
        {
          "name": "role_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/roles/{role_id}/groups/": {
      "get": {
        "operationId": "roles_groups_list",
        "description": "Returns a list of all the groups granted to a particular role.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Group"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": [
        {
          "name": "role_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/roles/{role_id}/groups/add/": {
      "post": {
        "operationId": "roles_groups_add_create",
        "description": "Add a group to a role.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleGroupAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RoleGroupAdd"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": [
        {
          "name": "role_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/roles/{role_id}/groups/remove/": {
      "post": {
        "operationId": "roles_groups_remove_create",
        "description": "Remove a group from a role.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleGroupRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RoleGroupRemove"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": [
        {
          "name": "role_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/roles/{role_id}/permissions/": {
      "get": {
        "operationId": "roles_permissions_list",
        "description": "Returns a list of all the permissions granted to a particular role.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Permission"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": [
        {
          "name": "role_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/roles/{role_id}/permissions/add/": {
      "post": {
        "operationId": "roles_permissions_add_create",
        "description": "Add a permission to a role.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolePermissionAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RolePermissionAdd"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": [
        {
          "name": "role_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/roles/{role_id}/permissions/remove/": {
      "post": {
        "operationId": "roles_permissions_remove_create",
        "description": "Remove a permission from a role.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolePermissionRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RolePermissionRemove"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "parameters": [
        {
          "name": "role_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/search/advanced/{search_model_pk}/": {
      "get": {
        "operationId": "search_advanced_read",
        "description": "Perform a search operation.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DummySearchResultModel"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "search"
        ]
      },
      "parameters": [
        {
          "name": "search_model_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/search/{search_model_pk}/": {
      "get": {
        "operationId": "search_read",
        "description": "Perform a search operation.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DummySearchResultModel"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "search"
        ]
      },
      "parameters": [
        {
          "name": "search_model_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/search_models/": {
      "get": {
        "operationId": "search_models_list",
        "description": "Returns a list of all the available search models.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SearchModel"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "search_models"
        ]
      },
      "parameters": []
    },
    "/smart_links/": {
      "get": {
        "operationId": "smart_links_list",
        "description": "Returns a list of all the smart links.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SmartLink"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "post": {
        "operationId": "smart_links_create",
        "description": "Create a new smart link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartLink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLink"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "parameters": []
    },
    "/smart_links/{smart_link_id}/": {
      "get": {
        "operationId": "smart_links_read",
        "description": "Return the details of the selected smart link.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLink"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "put": {
        "operationId": "smart_links_update",
        "description": "Edit the selected smart link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLink"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "patch": {
        "operationId": "smart_links_partial_update",
        "description": "Edit the selected smart link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLink"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "delete": {
        "operationId": "smart_links_delete",
        "description": "Delete the selected smart link.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "parameters": [
        {
          "name": "smart_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/smart_links/{smart_link_id}/conditions/": {
      "get": {
        "operationId": "smart_links_conditions_list",
        "description": "Returns a list of all the smart link conditions.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SmartLinkCondition"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "post": {
        "operationId": "smart_links_conditions_create",
        "description": "Create a new smart link condition.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartLinkCondition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLinkCondition"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "parameters": [
        {
          "name": "smart_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/smart_links/{smart_link_id}/conditions/{smart_link_condition_id}/": {
      "get": {
        "operationId": "smart_links_conditions_read",
        "description": "Return the details of the selected smart link condition.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLinkCondition"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "put": {
        "operationId": "smart_links_conditions_update",
        "description": "Edit the selected smart link condition.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartLinkCondition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLinkCondition"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "patch": {
        "operationId": "smart_links_conditions_partial_update",
        "description": "Edit the selected smart link condition.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartLinkCondition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLinkCondition"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "delete": {
        "operationId": "smart_links_conditions_delete",
        "description": "Delete the selected smart link condition.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "parameters": [
        {
          "name": "smart_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "smart_link_condition_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/smart_links/{smart_link_id}/document_types/": {
      "get": {
        "operationId": "smart_links_document_types_list",
        "description": "Return a list of the selected smart link document types.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "parameters": [
        {
          "name": "smart_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/smart_links/{smart_link_id}/document_types/add/": {
      "post": {
        "operationId": "smart_links_document_types_add_create",
        "description": "Add a document type to a smart link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartLinkDocumentTypeAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLinkDocumentTypeAdd"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "parameters": [
        {
          "name": "smart_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/smart_links/{smart_link_id}/document_types/remove/": {
      "post": {
        "operationId": "smart_links_document_types_remove_create",
        "description": "Remove a document type from a smart link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmartLinkDocumentTypeRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SmartLinkDocumentTypeRemove"
            }
          }
        },
        "tags": [
          "smart_links"
        ]
      },
      "parameters": [
        {
          "name": "smart_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/sources/": {
      "get": {
        "operationId": "sources_list",
        "description": "Returns a list of all the source.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Source"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "sources"
        ]
      },
      "post": {
        "operationId": "sources_create",
        "description": "Create a new source.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        },
        "tags": [
          "sources"
        ]
      },
      "parameters": []
    },
    "/sources/{source_id}/": {
      "get": {
        "operationId": "sources_read",
        "description": "Details of the selected source.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        },
        "tags": [
          "sources"
        ]
      },
      "put": {
        "operationId": "sources_update",
        "description": "Edit the selected source.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        },
        "tags": [
          "sources"
        ]
      },
      "patch": {
        "operationId": "sources_partial_update",
        "description": "Edit the selected source.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        },
        "tags": [
          "sources"
        ]
      },
      "delete": {
        "operationId": "sources_delete",
        "description": "Delete the selected source.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "sources"
        ]
      },
      "parameters": [
        {
          "name": "source_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/sources/{source_id}/actions/{action_name}/": {
      "get": {
        "operationId": "sources_actions_read",
        "description": "Get data from a source action.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SourceBackendAction"
            }
          }
        },
        "tags": [
          "sources"
        ]
      },
      "post": {
        "operationId": "sources_actions_create",
        "description": "Execute a source action.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SourceBackendAction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SourceBackendAction"
            }
          }
        },
        "tags": [
          "sources"
        ]
      },
      "parameters": [
        {
          "name": "source_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "action_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tags/": {
      "get": {
        "operationId": "tags_list",
        "description": "Returns a list of all the tags.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      },
      "post": {
        "operationId": "tags_create",
        "description": "Create a new tag.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "tags": [
          "tags"
        ]
      },
      "parameters": []
    },
    "/tags/{tag_id}/": {
      "get": {
        "operationId": "tags_read",
        "description": "Return the details of the selected tag.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "tags": [
          "tags"
        ]
      },
      "put": {
        "operationId": "tags_update",
        "description": "Edit the selected tag.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "tags": [
          "tags"
        ]
      },
      "patch": {
        "operationId": "tags_partial_update",
        "description": "Edit the selected tag.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "tags": [
          "tags"
        ]
      },
      "delete": {
        "operationId": "tags_delete",
        "description": "Delete the selected tag.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "name": "tag_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tags/{tag_id}/documents/": {
      "get": {
        "operationId": "tags_documents_list",
        "description": "Returns a list of all the documents tagged by a particular tag.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Document"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      },
      "parameters": [
        {
          "name": "tag_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/templates/": {
      "get": {
        "operationId": "templates_list",
        "description": "Returns a list of all the available templates.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AJAXTemplate"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "templates"
        ]
      },
      "parameters": []
    },
    "/templates/{name}/": {
      "get": {
        "operationId": "templates_read",
        "description": "Retrieve the details of the partial template.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AJAXTemplate"
            }
          }
        },
        "tags": [
          "templates"
        ]
      },
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/trashed_documents/": {
      "get": {
        "operationId": "trashed_documents_list",
        "description": "Returns a list of all the trashed documents.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TrashedDocument"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "trashed_documents"
        ]
      },
      "parameters": []
    },
    "/trashed_documents/{document_id}/": {
      "get": {
        "operationId": "trashed_documents_read",
        "description": "Retreive the details of the trashed document.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TrashedDocument"
            }
          }
        },
        "tags": [
          "trashed_documents"
        ]
      },
      "delete": {
        "operationId": "trashed_documents_delete",
        "description": "Delete the trashed document.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "trashed_documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/trashed_documents/{document_id}/image/": {
      "get": {
        "operationId": "trashed_documents_image_read",
        "description": "Returns an image representation of the selected trashed document.",
        "parameters": [],
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "trashed_documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/trashed_documents/{document_id}/restore/": {
      "post": {
        "operationId": "trashed_documents_restore_create",
        "description": "Restore a trashed document.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blank"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Blank"
            }
          }
        },
        "tags": [
          "trashed_documents"
        ]
      },
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/users/": {
      "get": {
        "operationId": "users_list",
        "description": "Returns a list of all the users.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "post": {
        "operationId": "users_create",
        "description": "Create a new user.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "parameters": []
    },
    "/users/current/": {
      "get": {
        "operationId": "users_current_read",
        "description": "Return the details of the current user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "users_current_update",
        "description": "Edit the current user.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "users_current_partial_update",
        "description": "Partially edit the current user.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "users_current_delete",
        "description": "Delete the current user.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "users"
        ]
      },
      "parameters": []
    },
    "/users/{user_id}/": {
      "get": {
        "operationId": "users_read",
        "description": "Return the details of the selected user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "users_update",
        "description": "Edit the selected user.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "users_partial_update",
        "description": "Partially edit the selected user.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "users_delete",
        "description": "Delete the selected user.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "users"
        ]
      },
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/users/{user_id}/groups/": {
      "get": {
        "operationId": "users_groups_list",
        "description": "Returns a list of all the groups to which the user belongings.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Group"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/web_links/": {
      "get": {
        "operationId": "web_links_list",
        "description": "Returns a list of all the web links.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WebLink"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "web_links"
        ]
      },
      "post": {
        "operationId": "web_links_create",
        "description": "Create a new web link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          }
        },
        "tags": [
          "web_links"
        ]
      },
      "parameters": []
    },
    "/web_links/{web_link_id}/": {
      "get": {
        "operationId": "web_links_read",
        "description": "Return the details of the selected web link.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          }
        },
        "tags": [
          "web_links"
        ]
      },
      "put": {
        "operationId": "web_links_update",
        "description": "Edit the selected web link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          }
        },
        "tags": [
          "web_links"
        ]
      },
      "patch": {
        "operationId": "web_links_partial_update",
        "description": "Edit the selected web link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WebLink"
            }
          }
        },
        "tags": [
          "web_links"
        ]
      },
      "delete": {
        "operationId": "web_links_delete",
        "description": "Delete the selected web link.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "web_links"
        ]
      },
      "parameters": [
        {
          "name": "web_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/web_links/{web_link_id}/document_types/": {
      "get": {
        "operationId": "web_links_document_types_list",
        "description": "Return a list of the selected web link document types.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "web_links"
        ]
      },
      "parameters": [
        {
          "name": "web_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/web_links/{web_link_id}/document_types/add/": {
      "post": {
        "operationId": "web_links_document_types_add_create",
        "description": "Add a document type to a web link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebLinkDocumentTypeAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WebLinkDocumentTypeAdd"
            }
          }
        },
        "tags": [
          "web_links"
        ]
      },
      "parameters": [
        {
          "name": "web_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/web_links/{web_link_id}/document_types/remove/": {
      "post": {
        "operationId": "web_links_document_types_remove_create",
        "description": "Remove a document type from a web link.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebLinkDocumentTypeRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WebLinkDocumentTypeRemove"
            }
          }
        },
        "tags": [
          "web_links"
        ]
      },
      "parameters": [
        {
          "name": "web_link_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/": {
      "get": {
        "operationId": "workflow_templates_list",
        "description": "Returns a list of all the workflow templates.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowTemplate"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "post": {
        "operationId": "workflow_templates_create",
        "description": "Create a new workflow template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplate"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": []
    },
    "/workflow_templates/{workflow_template_id}/": {
      "get": {
        "operationId": "workflow_templates_read",
        "description": "Return the details of the selected workflow template.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplate"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "put": {
        "operationId": "workflow_templates_update",
        "description": "Edit the selected workflow template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplate"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "patch": {
        "operationId": "workflow_templates_partial_update",
        "description": "Edit the selected workflow template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplate"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "delete": {
        "operationId": "workflow_templates_delete",
        "description": "Delete the selected workflow template.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/document_types/": {
      "get": {
        "operationId": "workflow_templates_document_types_list",
        "description": "Returns a list of all the document types attached to a workflow template.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentType"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/document_types/add/": {
      "post": {
        "operationId": "workflow_templates_document_types_add_create",
        "description": "Add a document type to a workflow template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateDocumentTypeAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateDocumentTypeAdd"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/document_types/remove/": {
      "post": {
        "operationId": "workflow_templates_document_types_remove_create",
        "description": "Remove a document type from a workflow template.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateDocumentTypeRemove"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateDocumentTypeRemove"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/image/": {
      "get": {
        "operationId": "workflow_templates_image_read",
        "description": "Returns an image representation of the selected workflow template.",
        "parameters": [],
        "produces": ["application/octet-stream"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/states/": {
      "get": {
        "operationId": "workflow_templates_states_list",
        "description": "Returns a list of all the workflow template states.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowTemplateState"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "post": {
        "operationId": "workflow_templates_states_create",
        "description": "Create a new workflow template state.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateState"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateState"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/": {
      "get": {
        "operationId": "workflow_templates_states_read",
        "description": "Return the details of the selected workflow template state.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateState"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "put": {
        "operationId": "workflow_templates_states_update",
        "description": "Edit the selected workflow template state.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateState"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "patch": {
        "operationId": "workflow_templates_states_partial_update",
        "description": "Edit the selected workflow template state.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateState"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "delete": {
        "operationId": "workflow_templates_states_delete",
        "description": "Delete the selected workflow template state.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_state_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/": {
      "get": {
        "operationId": "workflow_templates_states_actions_list",
        "description": "Returns a list of all the workflow template state actions.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowTemplateStateAction"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "post": {
        "operationId": "workflow_templates_states_actions_create",
        "description": "Create a new workflow template state action.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateAction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateAction"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_state_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/actions/{workflow_template_state_action_id}/": {
      "get": {
        "operationId": "workflow_templates_states_actions_read",
        "description": "Return the details of the selected workflow template state action.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateAction"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "put": {
        "operationId": "workflow_templates_states_actions_update",
        "description": "Edit the selected workflow template state action.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateAction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateAction"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "patch": {
        "operationId": "workflow_templates_states_actions_partial_update",
        "description": "Edit the selected workflow template state action.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateAction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateAction"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "delete": {
        "operationId": "workflow_templates_states_actions_delete",
        "description": "Delete the selected workflow template state action.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_state_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_state_action_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/": {
      "get": {
        "operationId": "workflow_templates_states_escalations_list",
        "description": "Returns a list of all the workflow template state escalations.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowTemplateStateEscalation"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "post": {
        "operationId": "workflow_templates_states_escalations_create",
        "description": "Create a new workflow template state escalation.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateEscalation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateEscalation"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_state_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/states/{workflow_template_state_id}/escalations/{workflow_template_state_escalation_id}/": {
      "get": {
        "operationId": "workflow_templates_states_escalations_read",
        "description": "Return the details of the selected workflow template state escalation.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateEscalation"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "put": {
        "operationId": "workflow_templates_states_escalations_update",
        "description": "Edit the selected workflow template state escalation.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateEscalation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateEscalation"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "patch": {
        "operationId": "workflow_templates_states_escalations_partial_update",
        "description": "Edit the selected workflow template state escalation.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateEscalation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateStateEscalation"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "delete": {
        "operationId": "workflow_templates_states_escalations_delete",
        "description": "Delete the selected workflow template state escalation.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_state_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_state_escalation_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/transitions/": {
      "get": {
        "operationId": "workflow_templates_transitions_list",
        "description": "Returns a list of all the workflow template transitions.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowTemplateTransition"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "post": {
        "operationId": "workflow_templates_transitions_create",
        "description": "Create a new workflow template transition.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransition"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/": {
      "get": {
        "operationId": "workflow_templates_transitions_read",
        "description": "Return the details of the selected workflow template transition.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransition"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "put": {
        "operationId": "workflow_templates_transitions_update",
        "description": "Edit the selected workflow template transition.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransition"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "patch": {
        "operationId": "workflow_templates_transitions_partial_update",
        "description": "Edit the selected workflow template transition.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransition"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "delete": {
        "operationId": "workflow_templates_transitions_delete",
        "description": "Delete the selected workflow template transition.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_transition_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/": {
      "get": {
        "operationId": "workflow_templates_transitions_fields_list",
        "description": "Returns a list of all the workflow template transition fields.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowTransitionField"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "post": {
        "operationId": "workflow_templates_transitions_fields_create",
        "description": "Create a new workflow template transition field.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTransitionField"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTransitionField"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_transition_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/fields/{workflow_template_transition_field_id}": {
      "get": {
        "operationId": "workflow_templates_transitions_fields_read",
        "description": "Return the details of the selected workflow template transition field.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTransitionField"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "put": {
        "operationId": "workflow_templates_transitions_fields_update",
        "description": "Edit the selected workflow template transition field.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTransitionField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTransitionField"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "patch": {
        "operationId": "workflow_templates_transitions_fields_partial_update",
        "description": "Edit the selected workflow template transition field.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTransitionField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTransitionField"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "delete": {
        "operationId": "workflow_templates_transitions_fields_delete",
        "description": "Delete the selected workflow template transition field.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_transition_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_transition_field_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/": {
      "get": {
        "operationId": "workflow_templates_transitions_triggers_list",
        "description": "Returns a list of all the workflow template transition triggers.",
        "parameters": [
          {
            "name": "_ordering",
            "in": "query",
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowTemplateTransitionTrigger"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "post": {
        "operationId": "workflow_templates_transitions_triggers_create",
        "description": "Create a new workflow template transition trigger.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransitionTrigger"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransitionTrigger"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_transition_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow_templates/{workflow_template_id}/transitions/{workflow_template_transition_id}/triggers/{workflow_template_transition_trigger_id}": {
      "get": {
        "operationId": "workflow_templates_transitions_triggers_read",
        "description": "Return the details of the selected workflow template transition trigger.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransitionTrigger"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "put": {
        "operationId": "workflow_templates_transitions_triggers_update",
        "description": "Edit the selected workflow template transition trigger.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransitionTrigger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransitionTrigger"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "patch": {
        "operationId": "workflow_templates_transitions_triggers_partial_update",
        "description": "Edit the selected workflow template transition trigger.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransitionTrigger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateTransitionTrigger"
            }
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "delete": {
        "operationId": "workflow_templates_transitions_triggers_delete",
        "description": "Delete the selected workflow template transition trigger.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "workflow_templates"
        ]
      },
      "parameters": [
        {
          "name": "workflow_template_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_transition_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "workflow_template_transition_trigger_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    }
  },
  "definitions": {
    "Announcement": {
      "required": [
        "label",
        "text"
      ],
      "type": "object",
      "properties": {
        "end_datetime": {
          "title": "Enddatum und Uhrzeit",
          "description": "Datum und Uhrzeit bis der diese Ankündigung angezeigt wird.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "enabled": {
          "title": "Aktiviert",
          "type": "boolean"
        },
        "label": {
          "title": "Bezeichner",
          "description": "Kurze Beschreibung dieser Ankündigung.",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "start_datetime": {
          "title": "Startdatum und Uhrzeit",
          "description": "Datum und Uhrzeit, nach denen diese Ankündigung angezeigt wird.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "text": {
          "title": "Text",
          "description": "Der tatsächlich anzuzeigende Text.",
          "type": "string",
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "Asset": {
      "required": [
        "label",
        "internal_name"
      ],
      "type": "object",
      "properties": {
        "file": {
          "title": "Datei",
          "type": "string",
          "readOnly": true,
          "format": "uri"
        },
        "label": {
          "title": "Bezeichner",
          "type": "string",
          "maxLength": 96,
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "image_url": {
          "title": "Bild URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "internal_name": {
          "title": "Interner Name",
          "description": "Dieser Wert wird benutzt, um auf dieses Asset zu verweisen. Kann nur Buchstaben, Nummern und Unterstriche enthalten.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "maxLength": 255,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "AuthToken": {
      "required": [
        "username",
        "password"
      ],
      "type": "object",
      "properties": {
        "username": {
          "title": "Benutzername",
          "type": "string",
          "minLength": 1
        },
        "password": {
          "title": "Passwort",
          "type": "string",
          "minLength": 1
        },
        "token": {
          "title": "Token",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "BatchAPIRequestResponse": {
      "required": [
        "requests"
      ],
      "type": "object",
      "properties": {
        "content": {
          "title": "Inhalt",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "data": {
          "title": "Daten",
          "type": "object",
          "readOnly": true
        },
        "headers": {
          "title": "Header",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "status_code": {
          "title": "Statuscode",
          "type": "integer",
          "readOnly": true
        },
        "requests": {
          "title": "Anfragen",
          "type": "object"
        }
      }
    },
    "Cabinet": {
      "required": [
        "label"
      ],
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cabinet"
          }
        },
        "documents_url": {
          "title": "Dokument-URL",
          "description": "Die URL dieses API-Endpunkts zeigt eine Liste der Dokumente in diesem Aktenschrank.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "full_path": {
          "title": "Vollständiger Pfad",
          "description": "Der Name dieser Aktenschrankebene angehängt an die Namen der übergeordneten Elemente.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text, der zur Identifizierung des Aktenschrankes dient.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "parent_id": {
          "title": "Parent id",
          "type": "string",
          "readOnly": true
        },
        "parent": {
          "title": "Übergeordneter Aktenschrank",
          "type": "integer",
          "x-nullable": true
        },
        "parent_url": {
          "title": "Übergeordnete URL",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DocumentType": {
      "required": [
        "label"
      ],
      "type": "object",
      "properties": {
        "delete_time_period": {
          "title": "Endgültig löschen nach",
          "description": "Zeitspanne nach der Dokumente dieses Typs die sich im Papierkorb befinden endgültig gelöscht werden.",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0,
          "x-nullable": true
        },
        "delete_time_unit": {
          "title": "Einheit (Löschen)",
          "type": "string",
          "enum": [
            "days",
            "hours",
            "minutes"
          ],
          "x-nullable": true
        },
        "filename_generator_backend": {
          "title": "Backend für die Dateinamengenerierung",
          "description": "Die für die Erzeugung verantwortliche Klasse des aktuellen Dateinamens, der  für hochgeladene Dokumente verwendet wird..",
          "type": "string",
          "maxLength": 224,
          "minLength": 1
        },
        "filename_generator_backend_arguments": {
          "title": "Argumente für das Backend für die Dateinamengenerierung",
          "description": "Die Argumente für das Backend der Dateinamenserzeugung in Form eines YAML dictionary.",
          "type": "string"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text zur Identifizierung des Dokumenttyps.",
          "type": "string",
          "maxLength": 196,
          "minLength": 1
        },
        "quick_label_list_url": {
          "title": "URL der Schnellbezeichnungsliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "trash_time_period": {
          "title": "Papierkorb nach",
          "description": "Zeitspanne nach der Dokumente dieses Typs in den Papierkorb verschoben werden.",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0,
          "x-nullable": true
        },
        "trash_time_unit": {
          "title": "Einheit (Papierkorb)",
          "type": "string",
          "enum": [
            "days",
            "hours",
            "minutes"
          ],
          "x-nullable": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DocumentFilePage": {
      "type": "object",
      "properties": {
        "document_file_id": {
          "title": "Document file id",
          "type": "string",
          "readOnly": true
        },
        "document_file_url": {
          "title": "URL der Dokumentendatei",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "image_url": {
          "title": "Bild URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "page_number": {
          "title": "Seitennummer",
          "type": "integer",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DocumentFile": {
      "type": "object",
      "properties": {
        "checksum": {
          "title": "Prüfsumme",
          "description": "A hash/checkdigit/fingerprint generated from the document's binary data. Only identical documents will have the same checksum.",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "comment": {
          "title": "Kommentar",
          "description": "Optionaler Kurztext zur Beschreibung der Dokumentendatei.",
          "type": "string"
        },
        "document_id": {
          "title": "Document id",
          "type": "string",
          "readOnly": true
        },
        "document_url": {
          "title": "Dokument-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "download_url": {
          "title": "Download-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "encoding": {
          "title": "Kodierung",
          "description": "Die Kodierung der Datei der Dokumentenversion. Binär 7-bit, binär 8-bit, Text, base64, etc.",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "file": {
          "title": "Datei",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Dateiname",
          "type": "string",
          "maxLength": 255
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "mimetype": {
          "title": "MIME Typ",
          "description": "Der MIME-Typ der Dokumentendatei. MIME-Typen beschreiben das Format einer Datei, in diesem Fall das Dateiformat des Dokuments. Beispiele für MIME-Typen sind: \"text/plain\" oder \"image/jpeg\".",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "page_list_url": {
          "title": "URL der Seitenliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "pages_first": {
          "$ref": "#/definitions/DocumentFilePage"
        },
        "size": {
          "title": "Größe",
          "description": "The size of the file in bytes.",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "timestamp": {
          "title": "Zeitstempel",
          "description": "Datum und Uhrzeit des Servers, zu denen die Dokumentendatei verarbeitet wurde.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "ContentType": {
      "type": "object",
      "properties": {
        "app_label": {
          "title": "App label",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "model": {
          "title": "Python Modell-Klassenname",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "DocumentVersionPage": {
      "required": [
        "content_type_id",
        "object_id"
      ],
      "type": "object",
      "properties": {
        "content_type": {
          "$ref": "#/definitions/ContentType"
        },
        "content_type_id": {
          "title": "Content type id",
          "description": "Inhaltstyp-ID des Quellobjekts für die Seite.",
          "type": "integer"
        },
        "document_version_id": {
          "title": "Document version id",
          "type": "string",
          "readOnly": true
        },
        "document_version_url": {
          "title": "URL der Dokumentversion",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "image_url": {
          "title": "Bild URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "object_id": {
          "title": "Object id",
          "description": "ID für das Quellobjekt der Seite.",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "page_number": {
          "title": "Seitennummer",
          "description": "Eindeutige ganzzahlige Nummer für die Seite. Die Seiten werden anhand dieser Nummer geordnet.",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DocumentVersion": {
      "type": "object",
      "properties": {
        "active": {
          "title": "Aktiv",
          "description": "Bestimmt die aktive Version des Dokuments.",
          "type": "boolean"
        },
        "comment": {
          "title": "Kommentar",
          "description": "Ein optionaler kurzer Text, der die Dokumentenversion beschreibt.",
          "type": "string"
        },
        "document_id": {
          "title": "Document id",
          "type": "string",
          "readOnly": true
        },
        "document_url": {
          "title": "Dokument-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "export_url": {
          "title": "Export-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "page_list_url": {
          "title": "URL der Seitenliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "pages_first": {
          "$ref": "#/definitions/DocumentVersionPage"
        },
        "timestamp": {
          "title": "Zeitstempel",
          "description": "Datum und Uhrzeit des Servers, zu denen die Dokumentenversion erstellt wurde.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "Document": {
      "type": "object",
      "properties": {
        "datetime_created": {
          "title": "Erzeugt",
          "description": "Datum und Zeit der Dokumenterstellung",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Beschreibung",
          "description": "Optionaler Kurztext zur Beschreibung eines Dokuments.",
          "type": "string"
        },
        "document_change_type_url": {
          "title": "URL des Dokumentänderungstyps",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_type": {
          "$ref": "#/definitions/DocumentType"
        },
        "file_latest": {
          "$ref": "#/definitions/DocumentFile"
        },
        "file_list_url": {
          "title": "URL der Dateiliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text zur Identifizierung des Dokuments. Standardmäßig wird der Name der ersten Datei, die in das Dokument hochgeladen wird, verwendet.",
          "type": "string",
          "maxLength": 255
        },
        "language": {
          "title": "Sprache",
          "description": "Die Hauptsprache des Dokuments.",
          "type": "string",
          "maxLength": 8
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "uuid": {
          "title": "UUID",
          "description": "UUID (Universally Unique Identifier) des Dokuments. Ein eindeutiger Identifikator für jedes Dokument.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "version_active": {
          "$ref": "#/definitions/DocumentVersion"
        },
        "version_list_url": {
          "title": "URL der Versionsliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "CabinetDocumentAdd": {
      "required": [
        "document"
      ],
      "type": "object",
      "properties": {
        "document": {
          "title": "Dokument-ID",
          "description": "Primärschlüssel des Dokuments, das zum Aktenschrank hinzugefügt werden soll.",
          "type": "string"
        }
      }
    },
    "CabinetDocumentRemove": {
      "required": [
        "document"
      ],
      "type": "object",
      "properties": {
        "document": {
          "title": "Dokument-ID",
          "description": "Primärschlüssel des Dokuments, das aus Aktenschrank entfernt werden soll.",
          "type": "string"
        }
      }
    },
    "User": {
      "required": [
        "username"
      ],
      "type": "object",
      "properties": {
        "first_name": {
          "title": "Vorname",
          "type": "string",
          "maxLength": 150
        },
        "date_joined": {
          "title": "Mitglied seit",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "title": "E-Mail-Adresse",
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "groups_url": {
          "title": "Gruppen-URL",
          "description": "Die URL dieses API-Endpunkts zeigt eine Liste der Gruppen, in welcher dieser Benutzer Mitglied ist.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "is_active": {
          "title": "Aktiv",
          "description": "Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.",
          "type": "boolean",
          "readOnly": true
        },
        "last_login": {
          "title": "Letzte Anmeldung",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "last_name": {
          "title": "Nachname",
          "type": "string",
          "maxLength": 150
        },
        "password": {
          "title": "Passwort",
          "type": "string",
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "username": {
          "title": "Benutzername",
          "description": "Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.",
          "type": "string",
          "pattern": "^[\\w.@+-]+$",
          "maxLength": 150,
          "minLength": 1
        }
      }
    },
    "DocumentCheckout": {
      "required": [
        "document",
        "expiration_datetime",
        "user"
      ],
      "type": "object",
      "properties": {
        "checkout_datetime": {
          "title": "Ausbuchungszeit",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "document": {
          "$ref": "#/definitions/Document"
        },
        "expiration_datetime": {
          "title": "Ausbuchungsende",
          "description": "Zeitdauer, die das Dokument ausgebucht bleiben soll.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "NewDocumentCheckout": {
      "required": [
        "block_new_file",
        "document_pk",
        "expiration_datetime"
      ],
      "type": "object",
      "properties": {
        "block_new_file": {
          "title": "Block new file",
          "type": "boolean"
        },
        "document": {
          "title": "Dokument",
          "type": "integer",
          "readOnly": true
        },
        "document_pk": {
          "title": "Dokument-ID",
          "description": "Primärschlüssel des auszubuchenden Dokuments.",
          "type": "integer"
        },
        "expiration_datetime": {
          "title": "Expiration datetime",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "DocumentFileAction": {
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "label": {
          "title": "Bezeichner",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "MetadataType": {
      "required": [
        "label",
        "name"
      ],
      "type": "object",
      "properties": {
        "default": {
          "title": "Standard",
          "description": "Eine Vorlage zur Wiedergabe eingeben.",
          "type": "string",
          "maxLength": 128,
          "x-nullable": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Kurze Beschreibung dieses Metadatentyps.",
          "type": "string",
          "maxLength": 48,
          "minLength": 1
        },
        "lookup": {
          "title": "Suchen",
          "description": "Eine Vorlage zur Wiedergabe eingeben. Muss eine durch Kommata getrennte Zeichenkette ergeben.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "Name, der von anderen Programmteilen zur Referenzierung auf diesen Metadatentyp verwendet wird. Verwenden Sie keine in Python reservierte Wörter oder Leerzeichen.",
          "type": "string",
          "maxLength": 48,
          "minLength": 1
        },
        "parser": {
          "title": "Parser",
          "description": "Der Parser wird den eingegebenen Wert so reformatieren, dass er dem geforderten Format entspricht.",
          "type": "string",
          "maxLength": 224
        },
        "parser_arguments": {
          "title": "Parser Argumente",
          "description": "Die Argumente für den Parser im YAML Format eingeben.",
          "type": "string"
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "validation": {
          "title": "Validierer",
          "description": "Der Validierer wird den eingegebenen Wert zurückweisen, wenn er dem geforderten Format nicht entspricht.",
          "type": "string",
          "maxLength": 224
        },
        "validation_arguments": {
          "title": "Validierer Argumente",
          "description": "Die Argumente für den Validierer im YAML Format eingeben.",
          "type": "string"
        }
      }
    },
    "DocumentTypeMetadataType": {
      "type": "object",
      "properties": {
        "document_type": {
          "$ref": "#/definitions/DocumentType"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "metadata_type": {
          "$ref": "#/definitions/MetadataType"
        },
        "required": {
          "title": "Erforderlich",
          "type": "boolean"
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DocumentTypeOCRSettings": {
      "type": "object",
      "properties": {
        "auto_ocr": {
          "title": "Automatisches OCR",
          "description": "Neue Dokumente automatisch in die OCR-Warteschlange einstellen.",
          "type": "boolean"
        }
      }
    },
    "DocumentTypeParsingSettings": {
      "type": "object",
      "properties": {
        "auto_parsing": {
          "title": "Autoparsen",
          "description": "Neu erstellte Dokumente automatisch zum Parsen einreihen.",
          "type": "boolean"
        }
      }
    },
    "DocumentTypeQuickLabel": {
      "required": [
        "filename"
      ],
      "type": "object",
      "properties": {
        "document_type_url": {
          "title": "URL des Dokumenttyps",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "enabled": {
          "title": "Aktiviert",
          "type": "boolean"
        },
        "filename": {
          "title": "Bezeichner",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DocumentVersionModification": {
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "label": {
          "title": "Bezeichner",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "description": {
          "title": "Beschreibung",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "RecentlyAccessedDocument": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/Document"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "datetime_accessed": {
          "title": "Letzter Zugriff",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "FavoriteDocument": {
      "required": [
        "document_id"
      ],
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/Document"
        },
        "document_id": {
          "title": "Dokument-ID",
          "description": "Dokument-ID für das neue favorisierte Dokument.",
          "type": "integer"
        },
        "datetime_added": {
          "title": "Datum und Uhrzeit hinzugefügt",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DocumentUpload": {
      "type": "object",
      "properties": {
        "datetime_created": {
          "title": "Erzeugt",
          "description": "Datum und Zeit der Dokumenterstellung",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Beschreibung",
          "description": "Optionaler Kurztext zur Beschreibung eines Dokuments.",
          "type": "string"
        },
        "document_change_type_url": {
          "title": "URL des Dokumentänderungstyps",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_type": {
          "$ref": "#/definitions/DocumentType"
        },
        "file_list_url": {
          "title": "URL der Dateiliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text zur Identifizierung des Dokuments. Standardmäßig wird der Name der ersten Datei, die in das Dokument hochgeladen wird, verwendet.",
          "type": "string",
          "maxLength": 255
        },
        "language": {
          "title": "Sprache",
          "description": "Die Hauptsprache des Dokuments.",
          "type": "string",
          "maxLength": 8
        },
        "file_latest": {
          "$ref": "#/definitions/DocumentFile"
        },
        "pk": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "uuid": {
          "title": "UUID",
          "description": "UUID (Universally Unique Identifier) des Dokuments. Ein eindeutiger Identifikator für jedes Dokument.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "version_active": {
          "$ref": "#/definitions/DocumentVersion"
        },
        "version_list_url": {
          "title": "URL der Versionsliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "Comment": {
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "submit_date": {
          "title": "Erstellunsgdatum und -zeit",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "text": {
          "title": "Text",
          "type": "string",
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "DuplicateTargetDocument": {
      "type": "object",
      "properties": {
        "backend": {
          "title": "Backend",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "datetime_created": {
          "title": "Erzeugt",
          "description": "Datum und Zeit der Dokumenterstellung",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Beschreibung",
          "description": "Optionaler Kurztext zur Beschreibung eines Dokuments.",
          "type": "string"
        },
        "document_change_type_url": {
          "title": "URL des Dokumentänderungstyps",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_type": {
          "$ref": "#/definitions/DocumentType"
        },
        "file_latest": {
          "$ref": "#/definitions/DocumentFile"
        },
        "file_list_url": {
          "title": "URL der Dateiliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text zur Identifizierung des Dokuments. Standardmäßig wird der Name der ersten Datei, die in das Dokument hochgeladen wird, verwendet.",
          "type": "string",
          "maxLength": 255
        },
        "language": {
          "title": "Sprache",
          "description": "Die Hauptsprache des Dokuments.",
          "type": "string",
          "maxLength": 8
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "uuid": {
          "title": "UUID",
          "description": "UUID (Universally Unique Identifier) des Dokuments. Ein eindeutiger Identifikator für jedes Dokument.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "version_active": {
          "$ref": "#/definitions/DocumentVersion"
        },
        "version_list_url": {
          "title": "URL der Versionsliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DocumentFilePageContent": {
      "type": "object",
      "properties": {
        "content": {
          "title": "Inhalt",
          "description": "Vom Parser-Backend extrahierter Inhalt.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "DetachedSignature": {
      "type": "object",
      "properties": {
        "date_time": {
          "title": "Datum und Zeit der Unterschrift",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "document_file_url": {
          "title": "URL der Dokumentendatei",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "key_algorithm": {
          "title": "Key algorithm",
          "type": "string",
          "readOnly": true
        },
        "key_creation_date": {
          "title": "Key creation date",
          "type": "string",
          "readOnly": true
        },
        "key_expiration_date": {
          "title": "Key expiration date",
          "type": "string",
          "readOnly": true
        },
        "key_id": {
          "title": "Schlüssel-ID",
          "description": "ID des Schlüssels, mit dem das Dokument signiert wird.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "key_length": {
          "title": "Key length",
          "type": "string",
          "readOnly": true
        },
        "key_type": {
          "title": "Key type",
          "type": "string",
          "readOnly": true
        },
        "key_user_id": {
          "title": "Key user id",
          "type": "string",
          "readOnly": true
        },
        "key_url": {
          "title": "Key url",
          "type": "string",
          "readOnly": true
        },
        "public_key_fingerprint": {
          "title": "Fingerabdruck des öffentlichen Schlüssels",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "signature_id": {
          "title": "Unterschrifts-ID",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "url": {
          "title": "Url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "SignDetached": {
      "required": [
        "key"
      ],
      "type": "object",
      "properties": {
        "key": {
          "title": "Schlüssel-ID",
          "description": "Primärschlüssel des geheimen Schlüssels, der für die Unterzeichnung der Dokumentendatei verwendet wird.",
          "type": "string"
        },
        "passphrase": {
          "title": "Passwort",
          "description": "Das Passwort um den Schlüssel zu entsperren und mit ihm die Dokumentendatei zu unterschreiben.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "DetachedSignatureUpload": {
      "type": "object",
      "properties": {
        "date_time": {
          "title": "Datum und Zeit der Unterschrift",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "document_file_url": {
          "title": "URL der Dokumentendatei",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "key_algorithm": {
          "title": "Key algorithm",
          "type": "string",
          "readOnly": true
        },
        "key_creation_date": {
          "title": "Key creation date",
          "type": "string",
          "readOnly": true
        },
        "key_expiration_date": {
          "title": "Key expiration date",
          "type": "string",
          "readOnly": true
        },
        "key_id": {
          "title": "Schlüssel-ID",
          "description": "ID des Schlüssels, mit dem das Dokument signiert wird.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "key_length": {
          "title": "Key length",
          "type": "string",
          "readOnly": true
        },
        "key_type": {
          "title": "Key type",
          "type": "string",
          "readOnly": true
        },
        "key_user_id": {
          "title": "Key user id",
          "type": "string",
          "readOnly": true
        },
        "key_url": {
          "title": "Key url",
          "type": "string",
          "readOnly": true
        },
        "public_key_fingerprint": {
          "title": "Fingerabdruck des öffentlichen Schlüssels",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "signature_id": {
          "title": "Unterschrifts-ID",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "url": {
          "title": "Url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_file": {
          "title": "Unterschriftsdatei",
          "description": "Signaturdatei, die zuvor generiert wurde.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true,
          "format": "uri"
        }
      }
    },
    "EmbeddedSignature": {
      "type": "object",
      "properties": {
        "date_time": {
          "title": "Datum und Zeit der Unterschrift",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "document_file_url": {
          "title": "URL der Dokumentendatei",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "key_algorithm": {
          "title": "Key algorithm",
          "type": "string",
          "readOnly": true
        },
        "key_creation_date": {
          "title": "Key creation date",
          "type": "string",
          "readOnly": true
        },
        "key_expiration_date": {
          "title": "Key expiration date",
          "type": "string",
          "readOnly": true
        },
        "key_id": {
          "title": "Schlüssel-ID",
          "description": "ID des Schlüssels, mit dem das Dokument signiert wird.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "key_length": {
          "title": "Key length",
          "type": "string",
          "readOnly": true
        },
        "key_type": {
          "title": "Key type",
          "type": "string",
          "readOnly": true
        },
        "key_user_id": {
          "title": "Key user id",
          "type": "string",
          "readOnly": true
        },
        "key_url": {
          "title": "Key url",
          "type": "string",
          "readOnly": true
        },
        "public_key_fingerprint": {
          "title": "Fingerabdruck des öffentlichen Schlüssels",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "signature_id": {
          "title": "Unterschrifts-ID",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "SignEmbedded": {
      "required": [
        "key"
      ],
      "type": "object",
      "properties": {
        "key": {
          "title": "Schlüssel-ID",
          "description": "Primärschlüssel des geheimen Schlüssels, der für die Unterzeichnung der Dokumentendatei verwendet wird.",
          "type": "string"
        },
        "passphrase": {
          "title": "Passwort",
          "description": "Das Passwort um den Schlüssel zu entsperren und mit ihm die Dokumentendatei zu unterschreiben.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "IndexInstanceNode": {
      "type": "object",
      "properties": {
        "documents_url": {
          "title": "Dokument-URL",
          "type": "string",
          "readOnly": true
        },
        "children_url": {
          "title": "Untergeordnete URLs",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "index_url": {
          "title": "Index URL",
          "type": "string",
          "readOnly": true
        },
        "level": {
          "title": "Level",
          "type": "integer",
          "readOnly": true
        },
        "parent_id": {
          "title": "Parent id",
          "type": "string",
          "readOnly": true
        },
        "parent_url": {
          "title": "Übergeordnete URL",
          "type": "string",
          "readOnly": true
        },
        "value": {
          "title": "Wert",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DocumentMetadata": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/Document"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "metadata_type": {
          "$ref": "#/definitions/MetadataType"
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        },
        "value": {
          "title": "Wert",
          "description": "Der aktuelle Wert, der in dem Metadatentypfeld für das Dokument gespeichert wird.",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "ResolvedSmartLink": {
      "type": "object",
      "properties": {
        "documents_url": {
          "title": "Dokument-URL",
          "type": "string",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "type": "string",
          "readOnly": true
        },
        "smart_link_url": {
          "title": "Smartlink-URL",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResolvedSmartLinkDocument": {
      "type": "object",
      "properties": {
        "datetime_created": {
          "title": "Erzeugt",
          "description": "Datum und Zeit der Dokumenterstellung",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Beschreibung",
          "description": "Optionaler Kurztext zur Beschreibung eines Dokuments.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "document_change_type_url": {
          "title": "URL des Dokumentänderungstyps",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_type": {
          "$ref": "#/definitions/DocumentType"
        },
        "file_latest": {
          "$ref": "#/definitions/DocumentFile"
        },
        "file_list_url": {
          "title": "URL der Dateiliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text zur Identifizierung des Dokuments. Standardmäßig wird der Name der ersten Datei, die in das Dokument hochgeladen wird, verwendet.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "language": {
          "title": "Sprache",
          "description": "Die Hauptsprache des Dokuments.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "uuid": {
          "title": "UUID",
          "description": "UUID (Universally Unique Identifier) des Dokuments. Ein eindeutiger Identifikator für jedes Dokument.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "version_active": {
          "$ref": "#/definitions/DocumentVersion"
        },
        "version_list_url": {
          "title": "URL der Versionsliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "resolved_smart_link_url": {
          "title": "Aufgelöste Smartlink-URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResolvedWebLink": {
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "navigation_url": {
          "title": "Navigations-URL",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Blank": {
      "type": "object",
      "properties": {}
    },
    "SignatureCapture": {
      "required": [
        "internal_name",
        "text"
      ],
      "type": "object",
      "properties": {
        "data": {
          "title": "Unterschriftserfassungsdaten",
          "description": "Daten, die die handgeschrieben Unterschrift repräsentieren.",
          "type": "string"
        },
        "document_id": {
          "title": "Document id",
          "type": "string",
          "readOnly": true
        },
        "document_url": {
          "title": "Dokument-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "image_url": {
          "title": "Bild URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "internal_name": {
          "title": "Interner Name",
          "description": "Dieser Wert wird verwendet, um auf diese Unterschriftserfassung zu verweisen in Beziehung auf das Dokument. Darf nur Buchstaben, Zahlen und Unterstriche enthalten.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "maxLength": 255,
          "minLength": 1
        },
        "text": {
          "title": "Text",
          "description": "Version der Unterschriftserfassung drucken.",
          "type": "string",
          "maxLength": 224,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "Tag": {
      "required": [
        "color",
        "label"
      ],
      "type": "object",
      "properties": {
        "color": {
          "title": "Farbe",
          "description": "Die RGB-Farbenwerte für den Tag.",
          "type": "string",
          "maxLength": 7,
          "minLength": 1
        },
        "documents_url": {
          "title": "Dokument-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text für den Namen des Tags.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DocumentTagAttach": {
      "required": [
        "tag"
      ],
      "type": "object",
      "properties": {
        "tag": {
          "title": "Tag ID",
          "description": "Primärschlüssel des Tags, welcher zum Dokument hinzugefügt wird.",
          "type": "string"
        }
      }
    },
    "DocumentTagRemove": {
      "required": [
        "tag"
      ],
      "type": "object",
      "properties": {
        "tag": {
          "title": "Tag ID",
          "description": "Primärschlüssel des Tags, welcher vom Dokument entfernt wird.",
          "type": "string"
        }
      }
    },
    "DocumentChangeType": {
      "required": [
        "document_type_id"
      ],
      "type": "object",
      "properties": {
        "document_type_id": {
          "title": "Dokumenttyp-ID",
          "description": "Primärschlüssel des Dokumenttyps, in den das Dokument geändert wird.",
          "type": "string"
        }
      }
    },
    "DocumentVersionModificationExecute": {
      "required": [
        "backend_id"
      ],
      "type": "object",
      "properties": {
        "backend_id": {
          "title": "Backend-ID",
          "description": "Primärschlüssel des auszuführenden Änderungs-Backends.",
          "type": "string",
          "enum": [
            "mayan.apps.documents.document_version_modifications.DocumentVersionModificationPagesAppend",
            "mayan.apps.documents.document_version_modifications.DocumentVersionModificationPagesReset"
          ]
        }
      }
    },
    "DocumentVersionPageOCRContent": {
      "type": "object",
      "properties": {
        "content": {
          "title": "Inhalt",
          "description": "Der Textinhalt, der von der OCR-Schrifterkennung erkannt wurde.",
          "type": "string"
        }
      }
    },
    "WorkflowTemplateState": {
      "required": [
        "label"
      ],
      "type": "object",
      "properties": {
        "actions_url": {
          "title": "Aktionen-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "completion": {
          "title": "Fertigstellung",
          "description": "Der Fertigstellungsgrad, den dieser Status im Verhältnis zum Workflow darstellt. Verwenden Sie Zahlen ohne Prozentzeichen.",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "escalations_url": {
          "title": "Eskalationen-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "initial": {
          "title": "Initial",
          "description": "Der Status, in dem der Workflow gestartet wird. Nur ein Status kann der Anfangszustand sein.",
          "type": "boolean"
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text zur Beschreibung des Workflowstatus.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "workflow_template_id": {
          "title": "Workflowvorlagen-ID",
          "type": "integer",
          "readOnly": true
        },
        "workflow_template_url": {
          "title": "Workflowvorlagen-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "WorkflowTemplateTransition": {
      "required": [
        "destination_state_id",
        "label",
        "origin_state_id"
      ],
      "type": "object",
      "properties": {
        "condition": {
          "title": "Bedingung",
          "description": "Die Bedingung, die bestimmt, ob dieser Übergang aktiviert ist oder nicht. Die Bedingung wird anhand der Workflow-Instanz ausgewertet. Bedingungen, die keinen Wert zurückgeben, die das logische Python None oder eine leere Zeichenfolge ('') zurückgeben, werden als logisch falsch betrachtet, jeder andere Wert wird als logisch wahr angesehen.",
          "type": "string"
        },
        "destination_state": {
          "$ref": "#/definitions/WorkflowTemplateState"
        },
        "destination_state_id": {
          "title": "Zielstatus-ID",
          "description": "Primärschlüssel  des hinzuzufügenden Zielstatus.",
          "type": "integer"
        },
        "field_list_url": {
          "title": "Feldlisten-URL",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text, um den Übergang zu beschreiben.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "origin_state": {
          "$ref": "#/definitions/WorkflowTemplateState"
        },
        "origin_state_id": {
          "title": "Herkunftsstatus-ID",
          "description": "Primärschlüssel des hinzuzufügenden Herkunftsstatus.",
          "type": "integer"
        },
        "trigger_list_url": {
          "title": "Triggerlisten-URL",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        },
        "workflow_template_id": {
          "title": "Workflowvorlagen-ID",
          "type": "integer",
          "readOnly": true
        },
        "workflow_template_url": {
          "title": "Workflowvorlagen-URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "WorkflowInstanceLogEntry": {
      "required": [
        "transition_id"
      ],
      "type": "object",
      "properties": {
        "comment": {
          "title": "Kommentar",
          "type": "string"
        },
        "datetime": {
          "title": "Zeit",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "document_url": {
          "title": "Dokument-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "extra_data": {
          "title": "Zusätzliche Daten",
          "type": "string"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "transition": {
          "$ref": "#/definitions/WorkflowTemplateTransition"
        },
        "transition_id": {
          "title": "Transition-ID",
          "description": "Primärschlüssel  des hinzuzufügenden Übergangs.",
          "type": "integer"
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "workflow_instance_url": {
          "title": "Workflowinstanz-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "workflow_template_url": {
          "title": "Workflowvorlagen-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "WorkflowTemplate": {
      "required": [
        "internal_name",
        "label"
      ],
      "type": "object",
      "properties": {
        "auto_launch": {
          "title": "Autostart",
          "description": "Workflow starten, wenn das Dokument erstellt wird.",
          "type": "boolean"
        },
        "document_types_add_url": {
          "title": "Dokumententypen hinzufügen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_types_remove_url": {
          "title": "Dokumententypen entfernen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_types_url": {
          "title": "Dokumententypen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "image_url": {
          "title": "Bild URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "internal_name": {
          "title": "Interner Name",
          "description": "Dieser Wert wird von anderen Programmteilen verwendet, um sich auf diesen Workflow zu beziehen. Es sind nur Buchstaben, Zahlen und Unterstriche erlaubt.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "maxLength": 255,
          "minLength": 1
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text zur Beschreibung des Workflows.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "states_url": {
          "title": "Status-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "transitions_url": {
          "title": "Übergangs-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "WorkflowInstance": {
      "type": "object",
      "properties": {
        "context": {
          "title": "Kontext",
          "type": "string",
          "readOnly": true
        },
        "current_state": {
          "$ref": "#/definitions/WorkflowTemplateState"
        },
        "document_url": {
          "title": "Dokument-URL",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "last_log_entry": {
          "$ref": "#/definitions/WorkflowInstanceLogEntry"
        },
        "log_entries_url": {
          "title": "Logeinträge-URL",
          "description": "Ein Link zur kompletten Historie dieses Workflows.",
          "type": "string",
          "readOnly": true
        },
        "log_entry_transitions_url": {
          "title": "Übergangslogeinträge-URL",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "description": "API URL für den Workflow, der auf das Dokument verweist, mit dem er verknüpft ist. Diese URL unterscheidet sich von der kanonischen Workflow-URL.",
          "type": "string",
          "readOnly": true
        },
        "workflow_template": {
          "$ref": "#/definitions/WorkflowTemplate"
        },
        "workflow_template_url": {
          "title": "Workflowvorlagen-URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "WorkflowInstanceLaunch": {
      "required": [
        "workflow_template_id"
      ],
      "type": "object",
      "properties": {
        "workflow_template_id": {
          "title": "Workflowvorlagen-ID",
          "description": "Primärschlüssel der Workflowvorlage.",
          "type": "string"
        }
      }
    },
    "EventTypeNamespace": {
      "required": [
        "label",
        "name"
      ],
      "type": "object",
      "properties": {
        "event_types_url": {
          "title": "Event types url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "type": "string",
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "EventType": {
      "required": [
        "id",
        "label",
        "name"
      ],
      "type": "object",
      "properties": {
        "event_type_namespace_url": {
          "title": "Ereignistyp Namensraum URL",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "string",
          "minLength": 1
        },
        "label": {
          "title": "Bezeichner",
          "type": "string",
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Event": {
      "required": [
        "actor_object_id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "actor": {
          "title": "Akteur",
          "type": "string",
          "readOnly": true
        },
        "actor_content_type": {
          "$ref": "#/definitions/ContentType"
        },
        "target": {
          "title": "Ziel",
          "type": "string",
          "readOnly": true
        },
        "target_content_type": {
          "$ref": "#/definitions/ContentType"
        },
        "verb": {
          "$ref": "#/definitions/EventType"
        },
        "actor_object_id": {
          "title": "Actor object id",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "target_object_id": {
          "title": "Target object id",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "timestamp": {
          "title": "Timestamp",
          "type": "string",
          "format": "date-time"
        },
        "public": {
          "title": "Public",
          "type": "boolean"
        }
      }
    },
    "Group": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 150,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "users_url": {
          "title": "Benutzer-URL",
          "description": "Die URL dieses API-Endpunkts zeigt eine Liste der Benutzer in dieser Gruppe.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "users_add_url": {
          "title": "Benutzer hinzufügen-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "users_remove_url": {
          "title": "Benutzer entfernen-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "GroupUserAdd": {
      "required": [
        "user"
      ],
      "type": "object",
      "properties": {
        "user": {
          "title": "Benutzer-ID",
          "description": "Primärschlüssel des Benutzers, welcher zur Gruppe hinzugefügt werden soll.",
          "type": "string"
        }
      }
    },
    "GroupUserRemove": {
      "required": [
        "user"
      ],
      "type": "object",
      "properties": {
        "user": {
          "title": "Benutzer-ID",
          "description": "Primärschlüssel des Benutzers, welcher von der Gruppe entfernt werden soll.",
          "type": "string"
        }
      }
    },
    "IndexInstance": {
      "type": "object",
      "properties": {
        "label": {
          "title": "Bezeichner",
          "description": "Kurze Beschreibung dieses Index.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "nodes_url": {
          "title": "Knotenpunkte URL",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IndexTemplate": {
      "required": [
        "label",
        "slug"
      ],
      "type": "object",
      "properties": {
        "document_types_add_url": {
          "title": "Dokumententypen hinzufügen URL",
          "description": "URL des API Endpunktes, um Dokumententypen zu dieser Indexvorlage hinzuzufügen.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_types_url": {
          "title": "Dokumententypen URL",
          "description": "URL des API-Endpunktes, der die Liste der mit dieser Indexvorlage verknüpften Dokumententypen zeigt.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_types_remove_url": {
          "title": "Dokumententypen entfernen URL",
          "description": "URL des API Endpunktes, um Dokumententypen von dieser Indexvorlage zu entfernen.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "enabled": {
          "title": "Aktiviert",
          "description": "Bewirkt Sichtbarkeit und Aktualisierung des Index, wenn Dokumente geändert werden.",
          "type": "boolean"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "index_template_root_node_id": {
          "title": "Indexvorlage Wurzelknotenpunkt ID",
          "type": "string",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Kurze Beschreibung dieses Index.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "nodes_url": {
          "title": "Knotenpunkte URL",
          "type": "string",
          "readOnly": true
        },
        "rebuild_url": {
          "title": "Wiederaufbau URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "reset_url": {
          "title": "Rücksetzungs URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "slug": {
          "title": "Webkürzel",
          "description": "Interner Name um diesen Index zu identifizieren.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "maxLength": 128,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DocumentTypeAdd": {
      "required": [
        "document_type"
      ],
      "type": "object",
      "properties": {
        "document_type": {
          "title": "Dokumenttyp-ID",
          "description": "Primärschlüssel des Dokumententyps, der zu dieser Indexvorlage hinzugefügt wird.",
          "type": "string"
        }
      }
    },
    "DocumentTypeRemove": {
      "required": [
        "document_type"
      ],
      "type": "object",
      "properties": {
        "document_type": {
          "title": "Dokumenttyp-ID",
          "description": "Primärschlüssel des Dokumententyps, der von dieser Indexvorlage entfernt wird.",
          "type": "string"
        }
      }
    },
    "IndexTemplateNode": {
      "required": [
        "expression"
      ],
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndexTemplateNode"
          }
        },
        "enabled": {
          "title": "Aktiviert",
          "description": "Bewirkt Sichtbarkeit und Aktualisierung des Index, wenn Dokumente geändert werden.",
          "type": "boolean"
        },
        "expression": {
          "title": "Indexierungsausdruck",
          "description": "Vorlage zur Generierung eingeben. Django's Standard-Vorlagen-Sprache benutzen.",
          "type": "string",
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "index": {
          "title": "Index",
          "type": "integer",
          "readOnly": true
        },
        "index_id": {
          "title": "Index id",
          "type": "string",
          "readOnly": true
        },
        "index_url": {
          "title": "Index URL",
          "type": "string",
          "readOnly": true
        },
        "level": {
          "title": "Level",
          "type": "integer",
          "readOnly": true
        },
        "link_documents": {
          "title": "Dokumente verknüpfen",
          "description": "Wählen Sie diese Option, wenn Dokumente in diesem Knoten dargestellt werden sollen (und dieser Knoten nicht als Eltern-Knoten für weitere Kind-Knotenpunkte fungieren soll).",
          "type": "boolean"
        },
        "parent": {
          "title": "Parent",
          "description": "Übergeordnete Knotenpunkt-Indexvorlage.",
          "type": "integer",
          "x-nullable": true
        },
        "parent_id": {
          "title": "Parent id",
          "type": "string",
          "readOnly": true
        },
        "parent_url": {
          "title": "Übergeordnete URL",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IndexTemplateNodeWrite": {
      "required": [
        "expression",
        "parent"
      ],
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndexTemplateNodeWrite"
          }
        },
        "enabled": {
          "title": "Aktiviert",
          "description": "Bewirkt Sichtbarkeit und Aktualisierung des Index, wenn Dokumente geändert werden.",
          "type": "boolean"
        },
        "expression": {
          "title": "Indexierungsausdruck",
          "description": "Vorlage zur Generierung eingeben. Django's Standard-Vorlagen-Sprache benutzen.",
          "type": "string",
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "index": {
          "title": "Index",
          "type": "integer",
          "readOnly": true
        },
        "index_url": {
          "title": "Index URL",
          "type": "string",
          "readOnly": true
        },
        "level": {
          "title": "Level",
          "type": "integer",
          "readOnly": true
        },
        "link_documents": {
          "title": "Dokumente verknüpfen",
          "description": "Wählen Sie diese Option, wenn Dokumente in diesem Knoten dargestellt werden sollen (und dieser Knoten nicht als Eltern-Knoten für weitere Kind-Knotenpunkte fungieren soll).",
          "type": "boolean"
        },
        "parent": {
          "title": "Übergeordneter Aktenschrank",
          "description": "Übergeordnete Knotenpunkt-Indexvorlage.",
          "type": "integer"
        },
        "parent_url": {
          "title": "Übergeordnete URL",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Key": {
      "required": [
        "key_data"
      ],
      "type": "object",
      "properties": {
        "algorithm": {
          "title": "Verfahren",
          "type": "integer",
          "readOnly": true
        },
        "creation_date": {
          "title": "Erstellungsdatum",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "expiration_date": {
          "title": "Ablaufdatum",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "fingerprint": {
          "title": "Fingerabdruck",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "key_data": {
          "title": "Schlüssel-Daten",
          "description": "ASCII Version des Schlüssels.",
          "type": "string",
          "minLength": 1
        },
        "key_type": {
          "title": "Typ",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "length": {
          "title": "Länge",
          "type": "integer",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "user_id": {
          "title": "Benutzer-ID",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "Message": {
      "required": [
        "body",
        "subject"
      ],
      "type": "object",
      "properties": {
        "body": {
          "title": "Nachrichtenteil",
          "description": "Der konkrete Inhalt der Nachricht.",
          "type": "string",
          "minLength": 1
        },
        "date_time": {
          "title": "Erstellungsdatum und -uhrzeit",
          "description": "Datum und Uhrzeit der Nachrichtenerstellung.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "read": {
          "title": "Gelesen",
          "description": "Dieses Feld bestimmt, ob die Nachricht gelesen wurde oder nicht.",
          "type": "boolean"
        },
        "sender_app_label": {
          "title": "App-Label des Absenders",
          "type": "string",
          "readOnly": true
        },
        "sender_model_name": {
          "title": "Modellname des Absenders",
          "type": "string",
          "readOnly": true
        },
        "sender_object_id": {
          "title": "Absenderobjekt-ID",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "sender_url": {
          "title": "Absender-URL",
          "type": "string",
          "readOnly": true
        },
        "subject": {
          "title": "Betreff",
          "description": "Kurze Beschreibung dieser Nachricht.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/Event"
        },
        "read": {
          "title": "Gelesen",
          "type": "boolean"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "namespace": {
          "title": "Namensraum",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "pk": {
          "title": "Primärschlüssel",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "label": {
          "title": "Bezeichner",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "Role": {
      "required": [
        "label"
      ],
      "type": "object",
      "properties": {
        "groups_add_url": {
          "title": "Gruppen hinzufügen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "groups_remove_url": {
          "title": "Gruppen entfernen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "groups_url": {
          "title": "Gruppen-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text, der die Rolle beschreibt.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "permissions_add_url": {
          "title": "Berechtigung hinzufügen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "permissions_url": {
          "title": "Berechtigungs-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "permissions_remove_url": {
          "title": "Berechtigung entziehen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "ACL": {
      "type": "object",
      "properties": {
        "content_type": {
          "$ref": "#/definitions/ContentType"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "object_id": {
          "title": "Objekt ID",
          "type": "integer",
          "readOnly": true
        },
        "permissions_add_url": {
          "title": "Berechtigung hinzufügen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "permissions_remove_url": {
          "title": "Berechtigung entziehen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "permissions_url": {
          "title": "Berechtigungs-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "role": {
          "$ref": "#/definitions/Role"
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "ACLPermissionAdd": {
      "required": [
        "permission"
      ],
      "type": "object",
      "properties": {
        "permission": {
          "title": "Berechtigungs-ID",
          "description": "Primärschlüssel der Berechtigung zum Hinzufügen von Zugriffsberechtigungen.",
          "type": "string"
        }
      }
    },
    "ACLPermissionRemove": {
      "required": [
        "permission"
      ],
      "type": "object",
      "properties": {
        "permission": {
          "title": "Berechtigungs-ID",
          "description": "Primärschlüssel der Berechtigung zum Entzug von Zugriffsberechtigungen.",
          "type": "string"
        }
      }
    },
    "ErrorLogPartitionEntry": {
      "required": [
        "object_id"
      ],
      "type": "object",
      "properties": {
        "content_type": {
          "$ref": "#/definitions/ContentType"
        },
        "datetime": {
          "title": "Datum und Uhrzeit",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "object_id": {
          "title": "Objekt ID",
          "type": "integer"
        },
        "text": {
          "title": "Text",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "ProjectInformation": {
      "type": "object",
      "properties": {
        "__author__": {
          "title": "Autor",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__author_email__": {
          "title": "Autoren-E-Mail",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__build__": {
          "title": "Build",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__build_string__": {
          "title": "Build Zeichenkette",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__copyright__": {
          "title": "Copyright",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__description__": {
          "title": "Beschreibung",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__django_version__": {
          "title": "Django Version",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__license__": {
          "title": "Lizenz",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__title__": {
          "title": "Titel",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__version__": {
          "title": "Version",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "__website__": {
          "title": "Website",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "RoleGroupAdd": {
      "required": [
        "group"
      ],
      "type": "object",
      "properties": {
        "group": {
          "title": "Gruppen-ID",
          "description": "Primärschlüssel der Gruppe, die zur Rolle hinzugefügt werden soll.",
          "type": "string"
        }
      }
    },
    "RoleGroupRemove": {
      "required": [
        "group"
      ],
      "type": "object",
      "properties": {
        "group": {
          "title": "Gruppen-ID",
          "description": "Primärschlüssel der Gruppe, die von der Rolle entfernt werden soll.",
          "type": "string"
        }
      }
    },
    "RolePermissionAdd": {
      "required": [
        "permission"
      ],
      "type": "object",
      "properties": {
        "permission": {
          "title": "Berechtigungs-ID",
          "description": "Primärschlüssel der Berechtigung, die zur Rolle hinzugefügt werden soll.",
          "type": "string"
        }
      }
    },
    "RolePermissionRemove": {
      "required": [
        "permission"
      ],
      "type": "object",
      "properties": {
        "permission": {
          "title": "Berechtigungs-ID",
          "description": "Primärschlüssel der Berechtigung, die von der Rolle entfernt werden soll.",
          "type": "string"
        }
      }
    },
    "DummySearchResultModel": {
      "type": "object",
      "properties": {}
    },
    "SearchField": {
      "type": "object",
      "properties": {
        "field_name": {
          "title": "Feldname",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "label": {
          "title": "Bezeichner",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "SearchModel": {
      "type": "object",
      "properties": {
        "app_label": {
          "title": "App-Label",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "model_name": {
          "title": "Modellname",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "pk": {
          "title": "Primärschlüssel",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "search_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchField"
          },
          "readOnly": true
        }
      }
    },
    "SmartLink": {
      "required": [
        "label"
      ],
      "type": "object",
      "properties": {
        "conditions_url": {
          "title": "Bedingungs-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_types_url": {
          "title": "Dokumententypen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_types_add_url": {
          "title": "Dokumententypen hinzufügen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_types_remove_url": {
          "title": "Dokumententypen entfernen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "dynamic_label": {
          "title": "Dynamische Bezeichnung",
          "description": "Verwenden Sie dieses Feld um abhängig vom Dokument, von dem aus auf den Smart Link zugegriffen wird, eine eindeutige Bezeichnung anzuzeigen.",
          "type": "string",
          "maxLength": 96
        },
        "enabled": {
          "title": "Aktiviert",
          "type": "boolean"
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text, der den Smart Link beschreibt.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "SmartLinkCondition": {
      "required": [
        "expression",
        "foreign_document_data",
        "operator"
      ],
      "type": "object",
      "properties": {
        "enabled": {
          "title": "Aktiviert",
          "type": "boolean"
        },
        "expression": {
          "title": "Ausdruck",
          "description": "Der Ausdruck, der Dokumenteigenschaften verwendet, die für das Fremddokumentfeld ausgewertet werden sollen.",
          "type": "string",
          "minLength": 1
        },
        "foreign_document_data": {
          "title": "Fremddokumentattribut",
          "description": "Repräsentiert die Metadaten aller anderen Dokumente.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "inclusion": {
          "title": "Inclusion",
          "description": "Die Einbeziehung wird für das erste Element ignoriert.",
          "type": "string",
          "enum": [
            "&",
            "|"
          ]
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "negated": {
          "title": "Verneint",
          "description": "Kehrt die Logik der Operation um.",
          "type": "boolean"
        },
        "operator": {
          "title": "Operator",
          "type": "string",
          "enum": [
            "exact",
            "iexact",
            "contains",
            "icontains",
            "in",
            "gt",
            "gte",
            "lt",
            "lte",
            "startswith",
            "istartswith",
            "endswith",
            "iendswith",
            "regex",
            "iregex"
          ]
        },
        "smart_link_id": {
          "title": "Smart link id",
          "type": "string",
          "readOnly": true
        },
        "smart_link_url": {
          "title": "Smartlink-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "SmartLinkDocumentTypeAdd": {
      "required": [
        "document_type"
      ],
      "type": "object",
      "properties": {
        "document_type": {
          "title": "Dokumenttyp-ID",
          "description": "Primärschlüssel des Dokumententyps, der zum Smartlink hinzugefügt werden soll.",
          "type": "string"
        }
      }
    },
    "SmartLinkDocumentTypeRemove": {
      "required": [
        "document_type"
      ],
      "type": "object",
      "properties": {
        "document_type": {
          "title": "Dokumenttyp-ID",
          "description": "Primärschlüssel des Dokumententyps, der vom Smartlink entfernt werden soll.",
          "type": "string"
        }
      }
    },
    "Source": {
      "required": [
        "backend_path",
        "label"
      ],
      "type": "object",
      "properties": {
        "actions": {
          "title": "Aktionen",
          "type": "string",
          "readOnly": true
        },
        "backend_data": {
          "title": "Backenddaten",
          "description": "JSON kodierte Daten für die Backend Klasse.",
          "type": "string"
        },
        "backend_path": {
          "title": "Backendpfad",
          "description": "Der punktierte Pythonpfad zur Backendklasse.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "enabled": {
          "title": "Aktiviert",
          "type": "boolean"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text zur Beschreibung dieser Quelle.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "SourceBackendAction": {
      "type": "object",
      "properties": {
        "arguments": {
          "title": "Argumente",
          "description": "Optionale Argumente für die Aktion in JSON-Formatierung",
          "type": "object"
        }
      }
    },
    "AJAXTemplate": {
      "type": "object",
      "properties": {
        "hex_hash": {
          "title": "Hex hash",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "html": {
          "title": "HTML",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "TrashedDocument": {
      "required": [
        "document_type_id"
      ],
      "type": "object",
      "properties": {
        "datetime_created": {
          "title": "Erzeugt",
          "description": "Datum und Zeit der Dokumenterstellung",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Beschreibung",
          "description": "Optionaler Kurztext zur Beschreibung eines Dokuments.",
          "type": "string"
        },
        "document_change_type_url": {
          "title": "URL des Dokumentänderungstyps",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_type": {
          "$ref": "#/definitions/DocumentType"
        },
        "document_type_id": {
          "title": "Dokumenttyp-ID",
          "description": "Dokumenttyp-ID für das neue Dokument.",
          "type": "integer"
        },
        "file_latest": {
          "$ref": "#/definitions/DocumentFile"
        },
        "file_list_url": {
          "title": "URL der Dateiliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "image_url": {
          "title": "Bild URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text zur Identifizierung des Dokuments. Standardmäßig wird der Name der ersten Datei, die in das Dokument hochgeladen wird, verwendet.",
          "type": "string",
          "maxLength": 255
        },
        "language": {
          "title": "Sprache",
          "description": "Die Hauptsprache des Dokuments.",
          "type": "string",
          "maxLength": 8
        },
        "restore_url": {
          "title": "Wiederherstellungs URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "trashed_date_time": {
          "title": "Zeitpunkt der Löschung",
          "description": "Datum und Uhrzeit, zu dem das Dokument in den Papierkorb verschoben wurde.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "uuid": {
          "title": "UUID",
          "description": "UUID (Universally Unique Identifier) des Dokuments. Ein eindeutiger Identifikator für jedes Dokument.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "version_active": {
          "$ref": "#/definitions/DocumentVersion"
        },
        "version_list_url": {
          "title": "URL der Versionsliste",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "WebLink": {
      "required": [
        "label",
        "template"
      ],
      "type": "object",
      "properties": {
        "document_types_add_url": {
          "title": "Dokumententypen hinzufügen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_types_remove_url": {
          "title": "Dokumententypen entfernen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "document_types_url": {
          "title": "Dokumententypen URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "enabled": {
          "title": "Aktiviert",
          "type": "boolean"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text, der den Weblink beschreibt.",
          "type": "string",
          "maxLength": 96,
          "minLength": 1
        },
        "template": {
          "title": "Vorlage",
          "description": "Vorlage, die für die Erstellung der endgültigen URL des Weblinks verwendet wird.",
          "type": "string",
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "WebLinkDocumentTypeAdd": {
      "required": [
        "document_type"
      ],
      "type": "object",
      "properties": {
        "document_type": {
          "title": "Dokumenttyp-ID",
          "description": "Primärschlüssel des Dokumententyps, welcher zum Weblink hinzuzufügt wird.",
          "type": "string"
        }
      }
    },
    "WebLinkDocumentTypeRemove": {
      "required": [
        "document_type"
      ],
      "type": "object",
      "properties": {
        "document_type": {
          "title": "Dokumenttyp-ID",
          "description": "Primärschlüssel des Dokumenttyps, welcher aus dem Weblink entfernt wird.",
          "type": "string"
        }
      }
    },
    "WorkflowTemplateDocumentTypeAdd": {
      "required": [
        "document_type_id"
      ],
      "type": "object",
      "properties": {
        "document_type_id": {
          "title": "Dokumenttyp-ID",
          "description": "Primärschlüssel des Dokumententyps, der zum Workflow hinzugefügt werden soll.",
          "type": "string"
        }
      }
    },
    "WorkflowTemplateDocumentTypeRemove": {
      "required": [
        "document_type_id"
      ],
      "type": "object",
      "properties": {
        "document_type_id": {
          "title": "Dokumenttyp-ID",
          "description": "Primärschlüssel des Dokumententyps, der vom Workflow entfernt werden soll.",
          "type": "string"
        }
      }
    },
    "WorkflowTemplateStateAction": {
      "required": [
        "action_path",
        "label"
      ],
      "type": "object",
      "properties": {
        "action_path": {
          "title": "Pfad der Eingangsaktion",
          "description": "Der punktierte Pythonpfad zu der Workflowaktionsklasse, die ausgeführt werden soll.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "action_data": {
          "title": "Daten der Eingangsaktion",
          "type": "string"
        },
        "condition": {
          "title": "Bedingung",
          "description": "Die Bedingung, die bestimmt, ob diese Statusaktion ausgeführt wird oder nicht. Die Bedingung wird anhand der Workflow-Instanz ausgewertet. Bedingungen, die keinen Wert zurückgeben, die das logische Python None oder eine leere Zeichenfolge ('') zurückgeben, werden als logisch falsch betrachtet, jeder andere Wert wird als logisch wahr angesehen.",
          "type": "string"
        },
        "enabled": {
          "title": "Aktiviert",
          "type": "boolean"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Ein kurzer Text, der die Aktion beschreibt.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "when": {
          "title": "Wann",
          "description": "Der Zeitpunkt des Status, an dem diese Aktion ausgeführt wird.",
          "type": "integer",
          "enum": [
            1,
            2
          ]
        },
        "workflow_template_state_id": {
          "title": "Workflowvorlagenstatus-ID",
          "type": "integer",
          "readOnly": true
        },
        "workflow_template_state_url": {
          "title": "Workflowvorlagenstatus-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "WorkflowTemplateStateEscalation": {
      "required": [
        "workflow_template_transition_id"
      ],
      "type": "object",
      "properties": {
        "amount": {
          "title": "Anzahl",
          "description": "Betrag der Zeiteinheiten der ausgewählten Eskalation.",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "comment": {
          "title": "Kommentar",
          "description": "Kommentar, der auf der Workflowinstanz gespeichert wird, wenn die Eskalation durchgeführt wird.",
          "type": "string"
        },
        "condition": {
          "title": "Bedingung",
          "description": "Die Bedingung, die entscheidet, ob dieses Objekt ausgeführt wird. Bedingungen, die keinen Wert oder den logischen Pythonwert None oder eine leere Zeichenkette ('') zurückliefern, werden als logisch Falsch (false) behandelt, jeder andere Wert wird als logisch Wahr (true) angesehen.",
          "type": "string"
        },
        "enabled": {
          "title": "Aktiviert",
          "description": "Automatischen Workflowübergang nach einer definierten Zeitspanne ohne Änderung im selben Status aktivieren.",
          "type": "boolean"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "priority": {
          "title": "Priorität",
          "description": "Legt die Reihenfolge fest, in der die Eskalationen evaluiert werden. Eskalationen mit niedriger Priorität werden vor Eskalationen mit hoher Priorität ausgeführt.",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "unit": {
          "title": "Zeiteinheit",
          "type": "string",
          "enum": [
            "days",
            "hours",
            "minutes"
          ]
        },
        "workflow_template_state_id": {
          "title": "Workflowvorlagenstatus-ID",
          "type": "integer",
          "readOnly": true
        },
        "workflow_template_state_url": {
          "title": "Workflowvorlagenstatus-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "workflow_template_transition_id": {
          "title": "Workflowvorlagenübergangs-ID",
          "description": "Primärschlüssel der Workflowvorlage, die hinzugefügt werden soll.",
          "type": "integer"
        },
        "workflow_template_transition_url": {
          "title": "Workflowvorlagenübergangs-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "WorkflowTransitionField": {
      "required": [
        "field_type",
        "name",
        "label"
      ],
      "type": "object",
      "properties": {
        "field_type": {
          "title": "Typ",
          "type": "integer",
          "enum": [
            1,
            2
          ]
        },
        "name": {
          "title": "Interner Name",
          "description": "Der Name, der zur Identifizierung dieses Felds in anderen Teilen des Workflow-Systems verwendet wird.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "help_text": {
          "title": "Hilfetext",
          "description": "Eine optionale Nachricht, die den Benutzern hilft, den Zweck des Felds und die Daten, die bereitgestellt werden sollen, besser zu verstehen.",
          "type": "string"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "label": {
          "title": "Bezeichner",
          "description": "Der Feldname, der auf der Benutzeroberfläche angezeigt wird.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "required": {
          "title": "Erforderlich",
          "description": "Ob diese Felder ausgefüllt werden müssen oder nicht, um fortzufahren.",
          "type": "boolean"
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "widget": {
          "title": "Widget-Klasse",
          "description": "Eine optionale Klasse zum Ändern der Standarddarstellung des Felds.",
          "type": "integer",
          "enum": [
            1
          ],
          "x-nullable": true
        },
        "widget_kwargs": {
          "title": "Widget-Schlüsselwortargumente",
          "description": "Eine Gruppe von Schlüsselwortargumenten zum Anpassen des Widgets. Verwenden Sie das YAML-Format.",
          "type": "string"
        },
        "workflow_template_url": {
          "title": "Workflowvorlagen-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "workflow_transition_id": {
          "title": "Workflowübergangs-ID",
          "type": "integer",
          "readOnly": true
        },
        "workflow_transition_url": {
          "title": "Workflowübergangs-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "WorkflowTemplateTransitionTrigger": {
      "required": [
        "event_type_id"
      ],
      "type": "object",
      "properties": {
        "event_type": {
          "$ref": "#/definitions/EventType"
        },
        "event_type_id": {
          "title": "Ereignistyp-URL",
          "type": "string",
          "minLength": 1
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "url": {
          "title": "URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "workflow_template_url": {
          "title": "Workflowvorlagen-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "workflow_transition_id": {
          "title": "Workflowübergangs-ID",
          "type": "integer",
          "readOnly": true
        },
        "workflow_transition_url": {
          "title": "Workflowübergangs-URL",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    }
  }
}